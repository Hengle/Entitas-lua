---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 29801.
--- DateTime: 2018/11/26 21:17
---

--require("EcsInc")
--
--local Entity = Entitas.Entity
--local Bag = Entitas.Bag
--local utils = Entitas.Utils
--local Group = Entitas.Group
-----@type Matcher
--local Matcher = Entitas.Matcher
--local ReactiveSystem = Entitas.ReactiveSystem
--local Systems = Entitas.Systems
--
--
--local p = GameContext
-----@type Entity

--
--
--print("Check Single Group ------------------------------------- Start --------------------------")
--local testGroup = p:getGroup(Matcher.GameBoard)
--testGroup.onEntityAdded:add(function ()
--    print("GameBoard receive add")
--end)
--testGroup.onEntityRemoved:add(function ()
--    print("GameBoard receive remove")
--end)
--testGroup.onEntityUpdated:add(function ()
--    print("GameBoard receive update")
--end)
--print("next we weill remove gameboard, after remove, our group must receive remove event")
--p:removeGameBoard()
--print("next we weill set gameboard, after set, our group must receive add event")
--p:setGameBoard(1,2,3,4)
--print("next we weill replace gameboard, after replace, our group must receive add , remove , update event")
--p:replaceGameBoard(1,2,3,4)
--print("Check Single Group ------------------------------------- End --------------------------\n\n")
--
--
--
--print("Check Allof Group ------------------------------------- Start --------------------------")
--local multi = p:getGroup(Matcher.AllOf( Matcher.Element, Matcher.Asset))
--multi.onEntityAdded:add(function ()
--    print("Allof Group receive add")
--end)
--multi.onEntityRemoved:add(function ()
--    print("Allof Group receive remove")
--end)
--multi.onEntityUpdated:add(function ()
--    print("Allof Group receive update")
--end)
--print("next we weill add Element, after add, must no log")
--local mu = p:createEntity()
--mu:setElement(true)
--print("next we weill add Asset, after add, our group must receive add event")
--mu:addAsset("123")
--print("next we weill replace Asset, after replace, our group must receive add , remove , update event")
--mu:replaceAsset("321")
--print("next we weill remove Asset, after remove, our group must receive remove  event")
--mu:removeAsset()
--print("next we weill remove Element, after remove, must no log")
--mu:setDestroy(false)
--print("Check Allof Group ------------------------------------- End --------------------------\n\n")
--
--
--
--print("Check Anyof Group ------------------------------------- Start --------------------------")
--local AnyOf = p:getGroup(Matcher.AnyOf( Matcher.Angle, Matcher.AssetObject))
--AnyOf.onEntityAdded:add(function ()
--    print("Anyof Group receive add")
--end)
--AnyOf.onEntityRemoved:add(function ()
--    print("Anyof Group receive remove")
--end)
--AnyOf.onEntityUpdated:add(function ()
--    print("Anyof Group receive update")
--end)
--print("next we weill add Element, after add, our group must receive add event")
--local any_e = p:createEntity()
--any_e:addAngle("addAngle")
--print("next we weill add AssetObject, after add, must  no log")
--any_e:addAssetObject("addAssetObject")
--print("next we weill replace AssetObject, after replace, our group must receive add, remove, update  event")
--any_e:replaceAssetObject("new asset1")
--
--print("next we weill remove Angle, after remove, must  no log")
--any_e:removeAngle()
--
--print("next we weill replace AssetObject, after replace, our group must receive remove, update, add  event")
--any_e:replaceAssetObject("new asset2")
--
--print("next we weill remove AssetObject, after remove, our group must receive remove  event")
--any_e:removeAssetObject()
--
--print("next we weill remove Element, after remove, must no log")
--print("Check Anyof Group ------------------------------------- End --------------------------\n\n")
--
--
--print("Check ReactiveSystem ------------------------------------- Start --------------------------")
--e = p:createEntity("123")
--
--local positionAdd = utils.class("positionAdd", ReactiveSystem)
--function positionAdd:getTriggers()
--    return {Matcher.Position:onEntityAdded()}
--end
--
--function positionAdd:execute(entities)
--    print("positionAdd Reactiove System excute")
--end
--
--local positionRemove = utils.class("positionRemove", ReactiveSystem)
--function positionRemove:getTriggers()
--    return {Matcher.Position:onEntityRemoved()}
--end
--
--function positionRemove:execute(entities)
--    print("positionRemove Reactiove System excute")
--
--end
--
--local positionAddorRemove = utils.class("positionAddorRemove", ReactiveSystem)
--function positionAddorRemove:getTriggers()
--    return {Matcher.Position:onEntityAddedOrRemoved()}
--end
--
--function positionAddorRemove:execute(entities)
--    print("positionAddorRemove Reactiove System excute")
--end
--
--local ss = Systems:new():add(p:createSystem(positionAdd)):add(p:createSystem(positionAddorRemove)):add(p:createSystem(positionRemove))
--ss:initialize()
--
--print("next, we weill excute ReactioveSystem with no PositionComponent Add., this must be no log")
--ss:execute()
--ss:execute()
--print("excute ReactioveSystem with no PositionComponent Add end")
--
--print("next, we weill replace position Component and excute systems., AddReactioveSystem and AddorRemoveSystem must receive add event")
--e:replacePosition(5,6)
--ss:execute()
--print("replace Position(5,6) End")
--
--print("next, we weill replace position Component and excute systems., AddReactioveSystem , AddorRemoveSystem ,RemoveSystem must receive add event")
--e:replacePosition(4,5)
--ss:execute()
--print("replace Position(4,5) End")
--
--print("next, we will destroy Entity and excute systems,RemoveSystem and  AddorRemoveSystem must receive event")
--p:destroyEntity(e)
--ss:execute()
--print("destroy entity end")
--print("Check ReactiveSystem ------------------------------------- End --------------------------\n\n")
require("test.test_entity_system")