local t_remove = table.removelocal Bag = Entitas.Baglocal Entity = Entitas.Entitylocal Context = Entitas.Contextlocal function com_tostring(obj)    local lua = ""    local t = type(obj)    if t == "number" then        lua = lua .. obj    elseif t == "boolean" then        lua = lua .. tostring(obj)    elseif t == "string" then        lua = lua .. string.format("%q", obj)    elseif t == "table" then        lua = lua .. "{"        local first = true        for k, v in pairs(obj) do            if not first  then                lua = lua .. ","            end            lua = lua .. com_tostring(k) .. "=" .. com_tostring(v)            first = false        end        lua = lua .. "}"    elseif t == "nil" then        return nil    else        lua = lua .. "userdata"    end    return luaendlocal function make_component(name, prop, ...)    local tmp = {}    tmp.__keys = {...}    tmp.__comp_name = name    --tmp.__comp_index = comp_index    tmp.__prop = prop    tmp.__tostring = function(t) return "\t" .. t.__comp_name .. com_tostring(t) end    tmp.__index = tmp    tmp.__set_value = function(tb,...)        local values = {...}        for k, v in pairs(tmp.__keys) do            if k <= #values then                tb[v] = values[k]            end        end    end    tmp.new = function(...)        local tb = {}        tmp.__set_value(tb,...)        return setmetatable(tb, tmp)    end    return tmpendlocal function getComponent(Context, componentClass, ...)    local component    if Context:size() > 0 then        component = Context:removeLast()        component.__set_value(component, ...)    else        component = componentClass.new(...)    end    return componentendlocal Components = {    IdComponentComponent = "IdComponentComponent",    MovableComponent = "MovableComponent",    ElementComponent = "ElementComponent",    MovingComponent = "MovingComponent",    ElementFrameComponent = "ElementFrameComponent",    InteractiveComponent = "InteractiveComponent",    DestroyComponent = "DestroyComponent",    AssetComponent = "AssetComponent",    AssetObjectComponent = "AssetObjectComponent",    PositionComponent = "PositionComponent",    ViewPosComponent = "ViewPosComponent",    FrameIndexComponent = "FrameIndexComponent",    ElementTypeComponent = "ElementTypeComponent",    DestroyTypeComponent = "DestroyTypeComponent",    ResetGameBoardComponent = "ResetGameBoardComponent",    AngleComponent = "AngleComponent",    ScaleComponent = "ScaleComponent",    GameBoardComponent = "GameBoardComponent",    ElementConfigComponent = "ElementConfigComponent",    MoveListComponent = "MoveListComponent",    InputComponent = "InputComponent",    LinkListComponent = "LinkListComponent",    BoardStateComponent = "BoardStateComponent",    LinkedComponent = "LinkedComponent",    HealthComponent = "HealthComponent",    ScoreComponent = "ScoreComponent",    ItemComponent = "ItemComponent",    ItemUseComponent = "ItemUseComponent",    ItemUsePosComponent = "ItemUsePosComponent",    TimeRecordComponent = "TimeRecordComponent",    MapRecordComponent = "MapRecordComponent",    ElementFrameConfigComponent = "ElementFrameConfigComponent",    SocoresComponent = "SocoresComponent",    TestStateComponent = "TestStateComponent",}local Cp_Types = {    IdComponentComponent = make_component('IdComponent', 'idComponent',  "value"),    MovableComponent = make_component('Movable', 'movable'),    ElementComponent = make_component('Element', 'element'),    MovingComponent = make_component('Moving', 'moving'),    ElementFrameComponent = make_component('ElementFrame', 'elementFrame'),    InteractiveComponent = make_component('Interactive', 'interactive'),    DestroyComponent = make_component('Destroy', 'destroy'),    AssetComponent = make_component('Asset', 'asset',  "value"),    AssetObjectComponent = make_component('AssetObject', 'assetObject',  "obj", "trans"),    PositionComponent = make_component('Position', 'position',  "value"),    ViewPosComponent = make_component('ViewPos', 'viewPos',  "value"),    FrameIndexComponent = make_component('FrameIndex', 'frameIndex',  "value"),    ElementTypeComponent = make_component('ElementType', 'elementType',  "value"),    DestroyTypeComponent = make_component('DestroyType', 'destroyType',  "value"),    ResetGameBoardComponent = make_component('ResetGameBoard', 'resetGameBoard'),    AngleComponent = make_component('Angle', 'angle',  "value"),    ScaleComponent = make_component('Scale', 'scale',  "value"),    GameBoardComponent = make_component('GameBoard', 'gameBoard',  "levelName", "height", "width", "levelConfig"),    ElementConfigComponent = make_component('ElementConfig', 'elementConfig',  "config"),    MoveListComponent = make_component('MoveList', 'moveList',  "value"),    InputComponent = make_component('Input', 'input',  "x", "y", "touchType"),    LinkListComponent = make_component('LinkList', 'linkList',  "list", "elementType"),    BoardStateComponent = make_component('BoardState', 'boardState',  "value"),    LinkedComponent = make_component('Linked', 'linked',  "index"),    HealthComponent = make_component('Health', 'health',  "hp"),    ScoreComponent = make_component('Score', 'score',  "value"),    ItemComponent = make_component('Item', 'item',  "itemId", "itemNum"),    ItemUseComponent = make_component('ItemUse', 'itemUse'),    ItemUsePosComponent = make_component('ItemUsePos', 'itemUsePos',  "posX", "posY"),    TimeRecordComponent = make_component('TimeRecord', 'timeRecord',  "Value"),    MapRecordComponent = make_component('MapRecord', 'mapRecord',  "value"),    ElementFrameConfigComponent = make_component('ElementFrameConfig', 'elementFrameConfig',  "value"),    SocoresComponent = make_component('Socores', 'socores',  "value"),    TestStateComponent = make_component('TestState', 'testState',  "value"),}local Cp_TypePools = {    IdComponent = Bag.new(16),    Movable = Bag.new(16),    Element = Bag.new(16),    Moving = Bag.new(16),    ElementFrame = Bag.new(16),    Interactive = Bag.new(16),    Destroy = Bag.new(16),    Asset = Bag.new(16),    AssetObject = Bag.new(16),    Position = Bag.new(16),    ViewPos = Bag.new(16),    FrameIndex = Bag.new(16),    ElementType = Bag.new(16),    DestroyType = Bag.new(16),    ResetGameBoard = Bag.new(16),    Angle = Bag.new(16),    Scale = Bag.new(16),    GameBoard = Bag.new(16),    ElementConfig = Bag.new(16),    MoveList = Bag.new(16),    Input = Bag.new(16),    LinkList = Bag.new(16),    BoardState = Bag.new(16),    Linked = Bag.new(16),    Health = Bag.new(16),    Score = Bag.new(16),    Item = Bag.new(16),    ItemUse = Bag.new(16),    ItemUsePos = Bag.new(16),    TimeRecord = Bag.new(16),    MapRecord = Bag.new(16),    ElementFrameConfig = Bag.new(16),    Socores = Bag.new(16),    TestState = Bag.new(16),}local _IdComponentCP = Cp_TypePools.IdComponentlocal _MovableCP = Cp_TypePools.Movablelocal _ElementCP = Cp_TypePools.Elementlocal _MovingCP = Cp_TypePools.Movinglocal _ElementFrameCP = Cp_TypePools.ElementFramelocal _InteractiveCP = Cp_TypePools.Interactivelocal _DestroyCP = Cp_TypePools.Destroylocal _AssetCP = Cp_TypePools.Assetlocal _AssetObjectCP = Cp_TypePools.AssetObjectlocal _PositionCP = Cp_TypePools.Positionlocal _ViewPosCP = Cp_TypePools.ViewPoslocal _FrameIndexCP = Cp_TypePools.FrameIndexlocal _ElementTypeCP = Cp_TypePools.ElementTypelocal _DestroyTypeCP = Cp_TypePools.DestroyTypelocal _ResetGameBoardCP = Cp_TypePools.ResetGameBoardlocal _AngleCP = Cp_TypePools.Anglelocal _ScaleCP = Cp_TypePools.Scalelocal _GameBoardCP = Cp_TypePools.GameBoardlocal _ElementConfigCP = Cp_TypePools.ElementConfiglocal _MoveListCP = Cp_TypePools.MoveListlocal _InputCP = Cp_TypePools.Inputlocal _LinkListCP = Cp_TypePools.LinkListlocal _BoardStateCP = Cp_TypePools.BoardStatelocal _LinkedCP = Cp_TypePools.Linkedlocal _HealthCP = Cp_TypePools.Healthlocal _ScoreCP = Cp_TypePools.Scorelocal _ItemCP = Cp_TypePools.Itemlocal _ItemUseCP = Cp_TypePools.ItemUselocal _ItemUsePosCP = Cp_TypePools.ItemUsePoslocal _TimeRecordCP = Cp_TypePools.TimeRecordlocal _MapRecordCP = Cp_TypePools.MapRecordlocal _ElementFrameConfigCP = Cp_TypePools.ElementFrameConfiglocal _SocoresCP = Cp_TypePools.Socoreslocal _TestStateCP = Cp_TypePools.TestStatefor i=1,16 do  _IdComponentCP:add(Cp_Types.IdComponentComponent.new())  _MovableCP:add(Cp_Types.MovableComponent.new())  _ElementCP:add(Cp_Types.ElementComponent.new())  _MovingCP:add(Cp_Types.MovingComponent.new())  _ElementFrameCP:add(Cp_Types.ElementFrameComponent.new())  _InteractiveCP:add(Cp_Types.InteractiveComponent.new())  _DestroyCP:add(Cp_Types.DestroyComponent.new())  _AssetCP:add(Cp_Types.AssetComponent.new())  _AssetObjectCP:add(Cp_Types.AssetObjectComponent.new())  _PositionCP:add(Cp_Types.PositionComponent.new())  _ViewPosCP:add(Cp_Types.ViewPosComponent.new())  _FrameIndexCP:add(Cp_Types.FrameIndexComponent.new())  _ElementTypeCP:add(Cp_Types.ElementTypeComponent.new())  _DestroyTypeCP:add(Cp_Types.DestroyTypeComponent.new())  _ResetGameBoardCP:add(Cp_Types.ResetGameBoardComponent.new())  _AngleCP:add(Cp_Types.AngleComponent.new())  _ScaleCP:add(Cp_Types.ScaleComponent.new())  _GameBoardCP:add(Cp_Types.GameBoardComponent.new())  _ElementConfigCP:add(Cp_Types.ElementConfigComponent.new())  _MoveListCP:add(Cp_Types.MoveListComponent.new())  _InputCP:add(Cp_Types.InputComponent.new())  _LinkListCP:add(Cp_Types.LinkListComponent.new())  _BoardStateCP:add(Cp_Types.BoardStateComponent.new())  _LinkedCP:add(Cp_Types.LinkedComponent.new())  _HealthCP:add(Cp_Types.HealthComponent.new())  _ScoreCP:add(Cp_Types.ScoreComponent.new())  _ItemCP:add(Cp_Types.ItemComponent.new())  _ItemUseCP:add(Cp_Types.ItemUseComponent.new())  _ItemUsePosCP:add(Cp_Types.ItemUsePosComponent.new())  _TimeRecordCP:add(Cp_Types.TimeRecordComponent.new())  _MapRecordCP:add(Cp_Types.MapRecordComponent.new())  _ElementFrameConfigCP:add(Cp_Types.ElementFrameConfigComponent.new())  _SocoresCP:add(Cp_Types.SocoresComponent.new())  _TestStateCP:add(Cp_Types.TestStateComponent.new())end----------------------------GameEntity     start---------------------------------------------local IdComponentComponent = Cp_Types.IdComponentComponentlocal MovableComponent = Cp_Types.MovableComponentlocal ElementComponent = Cp_Types.ElementComponentlocal MovingComponent = Cp_Types.MovingComponentlocal ElementFrameComponent = Cp_Types.ElementFrameComponentlocal InteractiveComponent = Cp_Types.InteractiveComponentlocal DestroyComponent = Cp_Types.DestroyComponentlocal AssetComponent = Cp_Types.AssetComponentlocal AssetObjectComponent = Cp_Types.AssetObjectComponentlocal PositionComponent = Cp_Types.PositionComponentlocal ViewPosComponent = Cp_Types.ViewPosComponentlocal FrameIndexComponent = Cp_Types.FrameIndexComponentlocal ElementTypeComponent = Cp_Types.ElementTypeComponentlocal DestroyTypeComponent = Cp_Types.DestroyTypeComponentlocal ResetGameBoardComponent = Cp_Types.ResetGameBoardComponentlocal AngleComponent = Cp_Types.AngleComponentlocal ScaleComponent = Cp_Types.ScaleComponentlocal GameBoardComponent = Cp_Types.GameBoardComponentlocal ElementConfigComponent = Cp_Types.ElementConfigComponentlocal MoveListComponent = Cp_Types.MoveListComponentlocal InputComponent = Cp_Types.InputComponentlocal LinkListComponent = Cp_Types.LinkListComponentlocal BoardStateComponent = Cp_Types.BoardStateComponentlocal LinkedComponent = Cp_Types.LinkedComponentlocal HealthComponent = Cp_Types.HealthComponentlocal ScoreComponent = Cp_Types.ScoreComponentlocal ItemComponent = Cp_Types.ItemComponentlocal ItemUseComponent = Cp_Types.ItemUseComponentlocal ItemUsePosComponent = Cp_Types.ItemUsePosComponentlocal TimeRecordComponent = Cp_Types.TimeRecordComponentlocal MapRecordComponent = Cp_Types.MapRecordComponentlocal ElementFrameConfigComponent = Cp_Types.ElementFrameConfigComponentlocal GameCmpIds = {    IdComponent = 1,    Movable = 2,    Element = 3,    Moving = 4,    ElementFrame = 5,    Interactive = 6,    Destroy = 7,    Asset = 8,    AssetObject = 9,    Position = 10,    ViewPos = 11,    FrameIndex = 12,    ElementType = 13,    DestroyType = 14,    ResetGameBoard = 15,    Angle = 16,    Scale = 17,    GameBoard = 18,    ElementConfig = 19,    MoveList = 20,    Input = 21,    LinkList = 22,    BoardState = 23,    Linked = 24,    Health = 25,    Score = 26,    Item = 27,    ItemUse = 28,    ItemUsePos = 29,    TimeRecord = 30,    MapRecord = 31,    ElementFrameConfig = 32,}---@class GameEntity---@field idComponent IdComponentComponent---@field asset AssetComponent---@field assetObject AssetObjectComponent---@field position PositionComponent---@field viewPos ViewPosComponent---@field frameIndex FrameIndexComponent---@field elementType ElementTypeComponent---@field destroyType DestroyTypeComponent---@field angle AngleComponent---@field scale ScaleComponent---@field gameBoard GameBoardComponent---@field elementConfig ElementConfigComponent---@field moveList MoveListComponent---@field input InputComponent---@field linkList LinkListComponent---@field boardState BoardStateComponent---@field linked LinkedComponent---@field health HealthComponent---@field score ScoreComponent---@field item ItemComponent---@field itemUsePos ItemUsePosComponent---@field timeRecord TimeRecordComponent---@field mapRecord MapRecordComponent---@field elementFrameConfig ElementFrameConfigComponentlocal GameEntity = Entitas.Entity---@class IdComponentComponent : IComponent---@field value numberfunction GameEntity:clearIdComponentCP()    _IdComponentCP:clear()end---@return booleanfunction GameEntity:hasIdComponent()  return self:hasComponent(GameCmpIds.IdComponent)end---@param value number---@returns Entitas.Entityfunction GameEntity:addIdComponent (value)    local component = getComponent(_IdComponentCP, IdComponentComponent, value)    self:addComponent(GameCmpIds.IdComponent, component, 'idComponent')    return selfendfunction GameEntity:replaceIdComponent (value)    local component = getComponent(_IdComponentCP, IdComponentComponent, value)    self:replaceComponent(GameCmpIds.IdComponent, component, 'idComponent')    return selfendfunction GameEntity:removeIdComponent ()    self:removeComponent(GameCmpIds.IdComponent, 'idComponent')    return selfend---@return booleanfunction GameEntity:hasMovable()  return self:hasComponent(GameCmpIds.Movable)end---@return GameEntityfunction GameEntity:setMovable(v)    if (v ~= self:hasMovable()) then        if (v) then            self:addComponent(GameCmpIds.Movable, MovableComponent, 'movable')        else            self:removeComponent(GameCmpIds.Movable)        end    end    return selfend---@return booleanfunction GameEntity:hasElement()  return self:hasComponent(GameCmpIds.Element)end---@return GameEntityfunction GameEntity:setElement(v)    if (v ~= self:hasElement()) then        if (v) then            self:addComponent(GameCmpIds.Element, ElementComponent, 'element')        else            self:removeComponent(GameCmpIds.Element)        end    end    return selfend---@return booleanfunction GameEntity:hasMoving()  return self:hasComponent(GameCmpIds.Moving)end---@return GameEntityfunction GameEntity:setMoving(v)    if (v ~= self:hasMoving()) then        if (v) then            self:addComponent(GameCmpIds.Moving, MovingComponent, 'moving')        else            self:removeComponent(GameCmpIds.Moving)        end    end    return selfend---@return booleanfunction GameEntity:hasElementFrame()  return self:hasComponent(GameCmpIds.ElementFrame)end---@return GameEntityfunction GameEntity:setElementFrame(v)    if (v ~= self:hasElementFrame()) then        if (v) then            self:addComponent(GameCmpIds.ElementFrame, ElementFrameComponent, 'elementFrame')        else            self:removeComponent(GameCmpIds.ElementFrame)        end    end    return selfend---@return booleanfunction GameEntity:hasInteractive()  return self:hasComponent(GameCmpIds.Interactive)end---@return GameEntityfunction GameEntity:setInteractive(v)    if (v ~= self:hasInteractive()) then        if (v) then            self:addComponent(GameCmpIds.Interactive, InteractiveComponent, 'interactive')        else            self:removeComponent(GameCmpIds.Interactive)        end    end    return selfend---@return booleanfunction GameEntity:hasDestroy()  return self:hasComponent(GameCmpIds.Destroy)end---@return GameEntityfunction GameEntity:setDestroy(v)    if (v ~= self:hasDestroy()) then        if (v) then            self:addComponent(GameCmpIds.Destroy, DestroyComponent, 'destroy')        else            self:removeComponent(GameCmpIds.Destroy)        end    end    return selfend---@class AssetComponent : IComponent---@field value stringfunction GameEntity:clearAssetCP()    _AssetCP:clear()end---@return booleanfunction GameEntity:hasAsset()  return self:hasComponent(GameCmpIds.Asset)end---@param value string---@returns Entitas.Entityfunction GameEntity:addAsset (value)    local component = getComponent(_AssetCP, AssetComponent, value)    self:addComponent(GameCmpIds.Asset, component, 'asset')    return selfendfunction GameEntity:replaceAsset (value)    local component = getComponent(_AssetCP, AssetComponent, value)    self:replaceComponent(GameCmpIds.Asset, component, 'asset')    return selfendfunction GameEntity:removeAsset ()    self:removeComponent(GameCmpIds.Asset, 'asset')    return selfend---@class AssetObjectComponent : IComponent---@field obj UnityEngine.GameObject---@field trans UnityEngine.Transformfunction GameEntity:clearAssetObjectCP()    _AssetObjectCP:clear()end---@return booleanfunction GameEntity:hasAssetObject()  return self:hasComponent(GameCmpIds.AssetObject)end---@param obj UnityEngine.GameObject---@param trans UnityEngine.Transform---@returns Entitas.Entityfunction GameEntity:addAssetObject (obj, trans)    local component = getComponent(_AssetObjectCP, AssetObjectComponent, obj, trans)    self:addComponent(GameCmpIds.AssetObject, component, 'assetObject')    return selfendfunction GameEntity:replaceAssetObject (obj, trans)    local component = getComponent(_AssetObjectCP, AssetObjectComponent, obj, trans)    self:replaceComponent(GameCmpIds.AssetObject, component, 'assetObject')    return selfendfunction GameEntity:removeAssetObject ()    self:removeComponent(GameCmpIds.AssetObject, 'assetObject')    return selfend---@class PositionComponent : IComponent---@field value PosV3function GameEntity:clearPositionCP()    _PositionCP:clear()end---@return booleanfunction GameEntity:hasPosition()  return self:hasComponent(GameCmpIds.Position)end---@param value PosV3---@returns Entitas.Entityfunction GameEntity:addPosition (value)    local component = getComponent(_PositionCP, PositionComponent, value)    self:addComponent(GameCmpIds.Position, component, 'position')    return selfendfunction GameEntity:replacePosition (value)    local component = getComponent(_PositionCP, PositionComponent, value)    self:replaceComponent(GameCmpIds.Position, component, 'position')    return selfendfunction GameEntity:removePosition ()    self:removeComponent(GameCmpIds.Position, 'position')    return selfend---@class ViewPosComponent : IComponent---@field value PosV2function GameEntity:clearViewPosCP()    _ViewPosCP:clear()end---@return booleanfunction GameEntity:hasViewPos()  return self:hasComponent(GameCmpIds.ViewPos)end---@param value PosV2---@returns Entitas.Entityfunction GameEntity:addViewPos (value)    local component = getComponent(_ViewPosCP, ViewPosComponent, value)    self:addComponent(GameCmpIds.ViewPos, component, 'viewPos')    return selfendfunction GameEntity:replaceViewPos (value)    local component = getComponent(_ViewPosCP, ViewPosComponent, value)    self:replaceComponent(GameCmpIds.ViewPos, component, 'viewPos')    return selfendfunction GameEntity:removeViewPos ()    self:removeComponent(GameCmpIds.ViewPos, 'viewPos')    return selfend---@class FrameIndexComponent : IComponent---@field value FrameIndexfunction GameEntity:clearFrameIndexCP()    _FrameIndexCP:clear()end---@return booleanfunction GameEntity:hasFrameIndex()  return self:hasComponent(GameCmpIds.FrameIndex)end---@param value FrameIndex---@returns Entitas.Entityfunction GameEntity:addFrameIndex (value)    local component = getComponent(_FrameIndexCP, FrameIndexComponent, value)    self:addComponent(GameCmpIds.FrameIndex, component, 'frameIndex')    return selfendfunction GameEntity:replaceFrameIndex (value)    local component = getComponent(_FrameIndexCP, FrameIndexComponent, value)    self:replaceComponent(GameCmpIds.FrameIndex, component, 'frameIndex')    return selfendfunction GameEntity:removeFrameIndex ()    self:removeComponent(GameCmpIds.FrameIndex, 'frameIndex')    return selfend---@class ElementTypeComponent : IComponent---@field value ElementTypefunction GameEntity:clearElementTypeCP()    _ElementTypeCP:clear()end---@return booleanfunction GameEntity:hasElementType()  return self:hasComponent(GameCmpIds.ElementType)end---@param value ElementType---@returns Entitas.Entityfunction GameEntity:addElementType (value)    local component = getComponent(_ElementTypeCP, ElementTypeComponent, value)    self:addComponent(GameCmpIds.ElementType, component, 'elementType')    return selfendfunction GameEntity:replaceElementType (value)    local component = getComponent(_ElementTypeCP, ElementTypeComponent, value)    self:replaceComponent(GameCmpIds.ElementType, component, 'elementType')    return selfendfunction GameEntity:removeElementType ()    self:removeComponent(GameCmpIds.ElementType, 'elementType')    return selfend---@class DestroyTypeComponent : IComponent---@field value DestroyTypefunction GameEntity:clearDestroyTypeCP()    _DestroyTypeCP:clear()end---@return booleanfunction GameEntity:hasDestroyType()  return self:hasComponent(GameCmpIds.DestroyType)end---@param value DestroyType---@returns Entitas.Entityfunction GameEntity:addDestroyType (value)    local component = getComponent(_DestroyTypeCP, DestroyTypeComponent, value)    self:addComponent(GameCmpIds.DestroyType, component, 'destroyType')    return selfendfunction GameEntity:replaceDestroyType (value)    local component = getComponent(_DestroyTypeCP, DestroyTypeComponent, value)    self:replaceComponent(GameCmpIds.DestroyType, component, 'destroyType')    return selfendfunction GameEntity:removeDestroyType ()    self:removeComponent(GameCmpIds.DestroyType, 'destroyType')    return selfend---@return booleanfunction GameEntity:hasResetGameBoard()  return self:hasComponent(GameCmpIds.ResetGameBoard)end---@return GameEntityfunction GameEntity:setResetGameBoard(v)    if (v ~= self:hasResetGameBoard()) then        if (v) then            self:addComponent(GameCmpIds.ResetGameBoard, ResetGameBoardComponent, 'resetGameBoard')        else            self:removeComponent(GameCmpIds.ResetGameBoard)        end    end    return selfend---@class AngleComponent : IComponent---@field value numberfunction GameEntity:clearAngleCP()    _AngleCP:clear()end---@return booleanfunction GameEntity:hasAngle()  return self:hasComponent(GameCmpIds.Angle)end---@param value number---@returns Entitas.Entityfunction GameEntity:addAngle (value)    local component = getComponent(_AngleCP, AngleComponent, value)    self:addComponent(GameCmpIds.Angle, component, 'angle')    return selfendfunction GameEntity:replaceAngle (value)    local component = getComponent(_AngleCP, AngleComponent, value)    self:replaceComponent(GameCmpIds.Angle, component, 'angle')    return selfendfunction GameEntity:removeAngle ()    self:removeComponent(GameCmpIds.Angle, 'angle')    return selfend---@class ScaleComponent : IComponent---@field value numberfunction GameEntity:clearScaleCP()    _ScaleCP:clear()end---@return booleanfunction GameEntity:hasScale()  return self:hasComponent(GameCmpIds.Scale)end---@param value number---@returns Entitas.Entityfunction GameEntity:addScale (value)    local component = getComponent(_ScaleCP, ScaleComponent, value)    self:addComponent(GameCmpIds.Scale, component, 'scale')    return selfendfunction GameEntity:replaceScale (value)    local component = getComponent(_ScaleCP, ScaleComponent, value)    self:replaceComponent(GameCmpIds.Scale, component, 'scale')    return selfendfunction GameEntity:removeScale ()    self:removeComponent(GameCmpIds.Scale, 'scale')    return selfend---@class GameBoardComponent : IComponent---@field levelName string---@field height number---@field width number---@field levelConfig Config.LevelMapConfigfunction GameEntity:clearGameBoardCP()    _GameBoardCP:clear()end---@return booleanfunction GameEntity:hasGameBoard()  return self:hasComponent(GameCmpIds.GameBoard)end---@param levelName string---@param height number---@param width number---@param levelConfig Config.LevelMapConfig---@returns Entitas.Entityfunction GameEntity:addGameBoard (levelName, height, width, levelConfig)    local component = getComponent(_GameBoardCP, GameBoardComponent, levelName, height, width, levelConfig)    self:addComponent(GameCmpIds.GameBoard, component, 'gameBoard')    return selfendfunction GameEntity:replaceGameBoard (levelName, height, width, levelConfig)    local component = getComponent(_GameBoardCP, GameBoardComponent, levelName, height, width, levelConfig)    self:replaceComponent(GameCmpIds.GameBoard, component, 'gameBoard')    return selfendfunction GameEntity:removeGameBoard ()    self:removeComponent(GameCmpIds.GameBoard, 'gameBoard')    return selfend---@class ElementConfigComponent : IComponent---@field config Config.Elementfunction GameEntity:clearElementConfigCP()    _ElementConfigCP:clear()end---@return booleanfunction GameEntity:hasElementConfig()  return self:hasComponent(GameCmpIds.ElementConfig)end---@param config Config.Element---@returns Entitas.Entityfunction GameEntity:addElementConfig (config)    local component = getComponent(_ElementConfigCP, ElementConfigComponent, config)    self:addComponent(GameCmpIds.ElementConfig, component, 'elementConfig')    return selfendfunction GameEntity:replaceElementConfig (config)    local component = getComponent(_ElementConfigCP, ElementConfigComponent, config)    self:replaceComponent(GameCmpIds.ElementConfig, component, 'elementConfig')    return selfendfunction GameEntity:removeElementConfig ()    self:removeComponent(GameCmpIds.ElementConfig, 'elementConfig')    return selfend---@class MoveListComponent : IComponent---@field value PosV2[]function GameEntity:clearMoveListCP()    _MoveListCP:clear()end---@return booleanfunction GameEntity:hasMoveList()  return self:hasComponent(GameCmpIds.MoveList)end---@param value PosV2[]---@returns Entitas.Entityfunction GameEntity:addMoveList (value)    local component = getComponent(_MoveListCP, MoveListComponent, value)    self:addComponent(GameCmpIds.MoveList, component, 'moveList')    return selfendfunction GameEntity:replaceMoveList (value)    local component = getComponent(_MoveListCP, MoveListComponent, value)    self:replaceComponent(GameCmpIds.MoveList, component, 'moveList')    return selfendfunction GameEntity:removeMoveList ()    self:removeComponent(GameCmpIds.MoveList, 'moveList')    return selfend---@class InputComponent : IComponent---@field x number---@field y number---@field touchType TouchTypefunction GameEntity:clearInputCP()    _InputCP:clear()end---@return booleanfunction GameEntity:hasInput()  return self:hasComponent(GameCmpIds.Input)end---@param x number---@param y number---@param touchType TouchType---@returns Entitas.Entityfunction GameEntity:addInput (x, y, touchType)    local component = getComponent(_InputCP, InputComponent, x, y, touchType)    self:addComponent(GameCmpIds.Input, component, 'input')    return selfendfunction GameEntity:replaceInput (x, y, touchType)    local component = getComponent(_InputCP, InputComponent, x, y, touchType)    self:replaceComponent(GameCmpIds.Input, component, 'input')    return selfendfunction GameEntity:removeInput ()    self:removeComponent(GameCmpIds.Input, 'input')    return selfend---@class LinkListComponent : IComponent---@field list GameEntity[]---@field elementType ElementTypefunction GameEntity:clearLinkListCP()    _LinkListCP:clear()end---@return booleanfunction GameEntity:hasLinkList()  return self:hasComponent(GameCmpIds.LinkList)end---@param list GameEntity[]---@param elementType ElementType---@returns Entitas.Entityfunction GameEntity:addLinkList (list, elementType)    local component = getComponent(_LinkListCP, LinkListComponent, list, elementType)    self:addComponent(GameCmpIds.LinkList, component, 'linkList')    return selfendfunction GameEntity:replaceLinkList (list, elementType)    local component = getComponent(_LinkListCP, LinkListComponent, list, elementType)    self:replaceComponent(GameCmpIds.LinkList, component, 'linkList')    return selfendfunction GameEntity:removeLinkList ()    self:removeComponent(GameCmpIds.LinkList, 'linkList')    return selfend---@class BoardStateComponent : IComponent---@field value BoardStatefunction GameEntity:clearBoardStateCP()    _BoardStateCP:clear()end---@return booleanfunction GameEntity:hasBoardState()  return self:hasComponent(GameCmpIds.BoardState)end---@param value BoardState---@returns Entitas.Entityfunction GameEntity:addBoardState (value)    local component = getComponent(_BoardStateCP, BoardStateComponent, value)    self:addComponent(GameCmpIds.BoardState, component, 'boardState')    return selfendfunction GameEntity:replaceBoardState (value)    local component = getComponent(_BoardStateCP, BoardStateComponent, value)    self:replaceComponent(GameCmpIds.BoardState, component, 'boardState')    return selfendfunction GameEntity:removeBoardState ()    self:removeComponent(GameCmpIds.BoardState, 'boardState')    return selfend---@class LinkedComponent : IComponent---@field index numberfunction GameEntity:clearLinkedCP()    _LinkedCP:clear()end---@return booleanfunction GameEntity:hasLinked()  return self:hasComponent(GameCmpIds.Linked)end---@param index number---@returns Entitas.Entityfunction GameEntity:addLinked (index)    local component = getComponent(_LinkedCP, LinkedComponent, index)    self:addComponent(GameCmpIds.Linked, component, 'linked')    return selfendfunction GameEntity:replaceLinked (index)    local component = getComponent(_LinkedCP, LinkedComponent, index)    self:replaceComponent(GameCmpIds.Linked, component, 'linked')    return selfendfunction GameEntity:removeLinked ()    self:removeComponent(GameCmpIds.Linked, 'linked')    return selfend---@class HealthComponent : IComponent---@field hp numberfunction GameEntity:clearHealthCP()    _HealthCP:clear()end---@return booleanfunction GameEntity:hasHealth()  return self:hasComponent(GameCmpIds.Health)end---@param hp number---@returns Entitas.Entityfunction GameEntity:addHealth (hp)    local component = getComponent(_HealthCP, HealthComponent, hp)    self:addComponent(GameCmpIds.Health, component, 'health')    return selfendfunction GameEntity:replaceHealth (hp)    local component = getComponent(_HealthCP, HealthComponent, hp)    self:replaceComponent(GameCmpIds.Health, component, 'health')    return selfendfunction GameEntity:removeHealth ()    self:removeComponent(GameCmpIds.Health, 'health')    return selfend---@class ScoreComponent : IComponent---@field value numberfunction GameEntity:clearScoreCP()    _ScoreCP:clear()end---@return booleanfunction GameEntity:hasScore()  return self:hasComponent(GameCmpIds.Score)end---@param value number---@returns Entitas.Entityfunction GameEntity:addScore (value)    local component = getComponent(_ScoreCP, ScoreComponent, value)    self:addComponent(GameCmpIds.Score, component, 'score')    return selfendfunction GameEntity:replaceScore (value)    local component = getComponent(_ScoreCP, ScoreComponent, value)    self:replaceComponent(GameCmpIds.Score, component, 'score')    return selfendfunction GameEntity:removeScore ()    self:removeComponent(GameCmpIds.Score, 'score')    return selfend---@class ItemComponent : IComponent---@field itemId number---@field itemNum numberfunction GameEntity:clearItemCP()    _ItemCP:clear()end---@return booleanfunction GameEntity:hasItem()  return self:hasComponent(GameCmpIds.Item)end---@param itemId number---@param itemNum number---@returns Entitas.Entityfunction GameEntity:addItem (itemId, itemNum)    local component = getComponent(_ItemCP, ItemComponent, itemId, itemNum)    self:addComponent(GameCmpIds.Item, component, 'item')    return selfendfunction GameEntity:replaceItem (itemId, itemNum)    local component = getComponent(_ItemCP, ItemComponent, itemId, itemNum)    self:replaceComponent(GameCmpIds.Item, component, 'item')    return selfendfunction GameEntity:removeItem ()    self:removeComponent(GameCmpIds.Item, 'item')    return selfend---@return booleanfunction GameEntity:hasItemUse()  return self:hasComponent(GameCmpIds.ItemUse)end---@return GameEntityfunction GameEntity:setItemUse(v)    if (v ~= self:hasItemUse()) then        if (v) then            self:addComponent(GameCmpIds.ItemUse, ItemUseComponent, 'itemUse')        else            self:removeComponent(GameCmpIds.ItemUse)        end    end    return selfend---@class ItemUsePosComponent : IComponent---@field posX number---@field posY numberfunction GameEntity:clearItemUsePosCP()    _ItemUsePosCP:clear()end---@return booleanfunction GameEntity:hasItemUsePos()  return self:hasComponent(GameCmpIds.ItemUsePos)end---@param posX number---@param posY number---@returns Entitas.Entityfunction GameEntity:addItemUsePos (posX, posY)    local component = getComponent(_ItemUsePosCP, ItemUsePosComponent, posX, posY)    self:addComponent(GameCmpIds.ItemUsePos, component, 'itemUsePos')    return selfendfunction GameEntity:replaceItemUsePos (posX, posY)    local component = getComponent(_ItemUsePosCP, ItemUsePosComponent, posX, posY)    self:replaceComponent(GameCmpIds.ItemUsePos, component, 'itemUsePos')    return selfendfunction GameEntity:removeItemUsePos ()    self:removeComponent(GameCmpIds.ItemUsePos, 'itemUsePos')    return selfend---@class TimeRecordComponent : IComponent---@field Value numberfunction GameEntity:clearTimeRecordCP()    _TimeRecordCP:clear()end---@return booleanfunction GameEntity:hasTimeRecord()  return self:hasComponent(GameCmpIds.TimeRecord)end---@param Value number---@returns Entitas.Entityfunction GameEntity:addTimeRecord (Value)    local component = getComponent(_TimeRecordCP, TimeRecordComponent, Value)    self:addComponent(GameCmpIds.TimeRecord, component, 'timeRecord')    return selfendfunction GameEntity:replaceTimeRecord (Value)    local component = getComponent(_TimeRecordCP, TimeRecordComponent, Value)    self:replaceComponent(GameCmpIds.TimeRecord, component, 'timeRecord')    return selfendfunction GameEntity:removeTimeRecord ()    self:removeComponent(GameCmpIds.TimeRecord, 'timeRecord')    return selfend---@class MapRecordComponent : IComponent---@field value number[]function GameEntity:clearMapRecordCP()    _MapRecordCP:clear()end---@return booleanfunction GameEntity:hasMapRecord()  return self:hasComponent(GameCmpIds.MapRecord)end---@param value number[]---@returns Entitas.Entityfunction GameEntity:addMapRecord (value)    local component = getComponent(_MapRecordCP, MapRecordComponent, value)    self:addComponent(GameCmpIds.MapRecord, component, 'mapRecord')    return selfendfunction GameEntity:replaceMapRecord (value)    local component = getComponent(_MapRecordCP, MapRecordComponent, value)    self:replaceComponent(GameCmpIds.MapRecord, component, 'mapRecord')    return selfendfunction GameEntity:removeMapRecord ()    self:removeComponent(GameCmpIds.MapRecord, 'mapRecord')    return selfend---@class ElementFrameConfigComponent : IComponent---@field value ElementFramefunction GameEntity:clearElementFrameConfigCP()    _ElementFrameConfigCP:clear()end---@return booleanfunction GameEntity:hasElementFrameConfig()  return self:hasComponent(GameCmpIds.ElementFrameConfig)end---@param value ElementFrame---@returns Entitas.Entityfunction GameEntity:addElementFrameConfig (value)    local component = getComponent(_ElementFrameConfigCP, ElementFrameConfigComponent, value)    self:addComponent(GameCmpIds.ElementFrameConfig, component, 'elementFrameConfig')    return selfendfunction GameEntity:replaceElementFrameConfig (value)    local component = getComponent(_ElementFrameConfigCP, ElementFrameConfigComponent, value)    self:replaceComponent(GameCmpIds.ElementFrameConfig, component, 'elementFrameConfig')    return selfendfunction GameEntity:removeElementFrameConfig ()    self:removeComponent(GameCmpIds.ElementFrameConfig, 'elementFrameConfig')    return selfend----------------------------Entity      end-------------------------------------------------------------------------Matcher     start----------------------------------------------@class GameMatcher---@field AnyOf fun(...) : GenerateMatcher---@field AllOf fun(...) : GenerateMatcher---@field noneOf fun(...) : GenerateMatcher---@field IdComponent : GenerateMatcher---@field Movable : GenerateMatcher---@field Element : GenerateMatcher---@field Moving : GenerateMatcher---@field ElementFrame : GenerateMatcher---@field Interactive : GenerateMatcher---@field Destroy : GenerateMatcher---@field Asset : GenerateMatcher---@field AssetObject : GenerateMatcher---@field Position : GenerateMatcher---@field ViewPos : GenerateMatcher---@field FrameIndex : GenerateMatcher---@field ElementType : GenerateMatcher---@field DestroyType : GenerateMatcher---@field ResetGameBoard : GenerateMatcher---@field Angle : GenerateMatcher---@field Scale : GenerateMatcher---@field GameBoard : GenerateMatcher---@field ElementConfig : GenerateMatcher---@field MoveList : GenerateMatcher---@field Input : GenerateMatcher---@field LinkList : GenerateMatcher---@field BoardState : GenerateMatcher---@field Linked : GenerateMatcher---@field Health : GenerateMatcher---@field Score : GenerateMatcher---@field Item : GenerateMatcher---@field ItemUse : GenerateMatcher---@field ItemUsePos : GenerateMatcher---@field TimeRecord : GenerateMatcher---@field MapRecord : GenerateMatcher---@field ElementFrameConfig : GenerateMatcherGameMatcher = Entitas.MatcherGameMatcher.IdComponent = GameMatcher.AllOf(GameCmpIds.IdComponent)GameMatcher.Movable = GameMatcher.AllOf(GameCmpIds.Movable)GameMatcher.Element = GameMatcher.AllOf(GameCmpIds.Element)GameMatcher.Moving = GameMatcher.AllOf(GameCmpIds.Moving)GameMatcher.ElementFrame = GameMatcher.AllOf(GameCmpIds.ElementFrame)GameMatcher.Interactive = GameMatcher.AllOf(GameCmpIds.Interactive)GameMatcher.Destroy = GameMatcher.AllOf(GameCmpIds.Destroy)GameMatcher.Asset = GameMatcher.AllOf(GameCmpIds.Asset)GameMatcher.AssetObject = GameMatcher.AllOf(GameCmpIds.AssetObject)GameMatcher.Position = GameMatcher.AllOf(GameCmpIds.Position)GameMatcher.ViewPos = GameMatcher.AllOf(GameCmpIds.ViewPos)GameMatcher.FrameIndex = GameMatcher.AllOf(GameCmpIds.FrameIndex)GameMatcher.ElementType = GameMatcher.AllOf(GameCmpIds.ElementType)GameMatcher.DestroyType = GameMatcher.AllOf(GameCmpIds.DestroyType)GameMatcher.ResetGameBoard = GameMatcher.AllOf(GameCmpIds.ResetGameBoard)GameMatcher.Angle = GameMatcher.AllOf(GameCmpIds.Angle)GameMatcher.Scale = GameMatcher.AllOf(GameCmpIds.Scale)GameMatcher.GameBoard = GameMatcher.AllOf(GameCmpIds.GameBoard)GameMatcher.ElementConfig = GameMatcher.AllOf(GameCmpIds.ElementConfig)GameMatcher.MoveList = GameMatcher.AllOf(GameCmpIds.MoveList)GameMatcher.Input = GameMatcher.AllOf(GameCmpIds.Input)GameMatcher.LinkList = GameMatcher.AllOf(GameCmpIds.LinkList)GameMatcher.BoardState = GameMatcher.AllOf(GameCmpIds.BoardState)GameMatcher.Linked = GameMatcher.AllOf(GameCmpIds.Linked)GameMatcher.Health = GameMatcher.AllOf(GameCmpIds.Health)GameMatcher.Score = GameMatcher.AllOf(GameCmpIds.Score)GameMatcher.Item = GameMatcher.AllOf(GameCmpIds.Item)GameMatcher.ItemUse = GameMatcher.AllOf(GameCmpIds.ItemUse)GameMatcher.ItemUsePos = GameMatcher.AllOf(GameCmpIds.ItemUsePos)GameMatcher.TimeRecord = GameMatcher.AllOf(GameCmpIds.TimeRecord)GameMatcher.MapRecord = GameMatcher.AllOf(GameCmpIds.MapRecord)GameMatcher.ElementFrameConfig = GameMatcher.AllOf(GameCmpIds.ElementFrameConfig)----------------------------Matcher     end-------------------------------------------------------------------------Context   start------------------------------------------------@class GameContext : _Context---@field GameGameBoardEntity Entity---@field gameBoard GameBoardComponent---@field isResetGameBoardEntity bool---@field GameScoreEntity Entity---@field score ScoreComponent---@field GameLinkListEntity Entity---@field linkList LinkListComponent---@field GameItemEntity Entity---@field item ItemComponent---@field GameTimeRecordEntity Entity---@field timeRecord TimeRecordComponent---@field createEntity fun():GameEntitylocal _GameContext = Context.new(GameCmpIds, #GameCmpIds)        ---@param {string} levelName"---@param {number} height"---@param {number} width"---@param {Config.LevelMapConfig} levelConfig"---@returns GameEntityfunction _GameContext:setGameBoard(levelName, height, width, levelConfig)    if (self:hasGameBoard()) then        error('GameBoardComponent already have')    end    local entity = self:createEntity('gameBoard')    self.gameBoardEntity = entity    local component = getComponent(_GameBoardCP, GameBoardComponent, levelName, height, width, levelConfig)    self.gameBoard = component    self.gameBoardEntity = entity    entity:addComponent(GameCmpIds.GameBoard, component, 'gameBoard')    return entityend---@param {string} levelName"---@param {number} height"---@param {number} width"---@param {Config.LevelMapConfig} levelConfig"---@returns GameEntityfunction _GameContext:replaceGameBoard(levelName, height, width, levelConfig)    local entity = self.gameBoardEntity    if (entity == nil) then        entity = self:setGameBoard(levelName, height, width, levelConfig)    else        local component = getComponent(_GameBoardCP, GameBoardComponent, levelName, height, width, levelConfig)        self.gameBoard = component        self.gameBoardEntity = entity        entity:replaceComponent(GameCmpIds.GameBoard, component, component)    end    return entityend---@return boolfunction _GameContext:hasGameBoard()    return self:getGroup(GameMatcher.GameBoard):getSingleEntity() ~= nilendfunction _GameContext:removeGameBoard()    local old = self.gameBoardEntity    self.gameBoardEntity = nil    self.gameBoard = nil    self:destroyEntity(old)end        ---@return boolfunction _GameContext:hasResetGameBoard()    return self:getGroup(GameMatcher.ResetGameBoard):single_entity() ~= nilend---@return Contextfunction _GameContext:setResetGameBoard(value)    if (v ~= self:hasResetGameBoard()) then        if (v) then            self:addComponent(GameCmpIds.ResetGameBoard, ResetGameBoardComponent, 'resetGameBoard')        else            self:removeComponent(ResetGameBoardComponent)        end    end    return selfend        ---@param {number} value"---@returns GameEntityfunction _GameContext:setScore(value)    if (self:hasScore()) then        error('ScoreComponent already have')    end    local entity = self:createEntity('score')    self.scoreEntity = entity    local component = getComponent(_ScoreCP, ScoreComponent, value)    self.score = component    self.scoreEntity = entity    entity:addComponent(GameCmpIds.Score, component, 'score')    return entityend---@param {number} value"---@returns GameEntityfunction _GameContext:replaceScore(value)    local entity = self.scoreEntity    if (entity == nil) then        entity = self:setScore(value)    else        local component = getComponent(_ScoreCP, ScoreComponent, value)        self.score = component        self.scoreEntity = entity        entity:replaceComponent(GameCmpIds.Score, component, component)    end    return entityend---@return boolfunction _GameContext:hasScore()    return self:getGroup(GameMatcher.Score):getSingleEntity() ~= nilendfunction _GameContext:removeScore()    local old = self.scoreEntity    self.scoreEntity = nil    self.score = nil    self:destroyEntity(old)end        ---@param {GameEntity[]} list"---@param {ElementType} elementType"---@returns GameEntityfunction _GameContext:setLinkList(list, elementType)    if (self:hasLinkList()) then        error('LinkListComponent already have')    end    local entity = self:createEntity('linkList')    self.linkListEntity = entity    local component = getComponent(_LinkListCP, LinkListComponent, list, elementType)    self.linkList = component    self.linkListEntity = entity    entity:addComponent(GameCmpIds.LinkList, component, 'linkList')    return entityend---@param {GameEntity[]} list"---@param {ElementType} elementType"---@returns GameEntityfunction _GameContext:replaceLinkList(list, elementType)    local entity = self.linkListEntity    if (entity == nil) then        entity = self:setLinkList(list, elementType)    else        local component = getComponent(_LinkListCP, LinkListComponent, list, elementType)        self.linkList = component        self.linkListEntity = entity        entity:replaceComponent(GameCmpIds.LinkList, component, component)    end    return entityend---@return boolfunction _GameContext:hasLinkList()    return self:getGroup(GameMatcher.LinkList):getSingleEntity() ~= nilendfunction _GameContext:removeLinkList()    local old = self.linkListEntity    self.linkListEntity = nil    self.linkList = nil    self:destroyEntity(old)end        ---@param {number} itemId"---@param {number} itemNum"---@returns GameEntityfunction _GameContext:setItem(itemId, itemNum)    if (self:hasItem()) then        error('ItemComponent already have')    end    local entity = self:createEntity('item')    self.itemEntity = entity    local component = getComponent(_ItemCP, ItemComponent, itemId, itemNum)    self.item = component    self.itemEntity = entity    entity:addComponent(GameCmpIds.Item, component, 'item')    return entityend---@param {number} itemId"---@param {number} itemNum"---@returns GameEntityfunction _GameContext:replaceItem(itemId, itemNum)    local entity = self.itemEntity    if (entity == nil) then        entity = self:setItem(itemId, itemNum)    else        local component = getComponent(_ItemCP, ItemComponent, itemId, itemNum)        self.item = component        self.itemEntity = entity        entity:replaceComponent(GameCmpIds.Item, component, component)    end    return entityend---@return boolfunction _GameContext:hasItem()    return self:getGroup(GameMatcher.Item):getSingleEntity() ~= nilendfunction _GameContext:removeItem()    local old = self.itemEntity    self.itemEntity = nil    self.item = nil    self:destroyEntity(old)end        ---@param {number} Value"---@returns GameEntityfunction _GameContext:setTimeRecord(Value)    if (self:hasTimeRecord()) then        error('TimeRecordComponent already have')    end    local entity = self:createEntity('timeRecord')    self.timeRecordEntity = entity    local component = getComponent(_TimeRecordCP, TimeRecordComponent, Value)    self.timeRecord = component    self.timeRecordEntity = entity    entity:addComponent(GameCmpIds.TimeRecord, component, 'timeRecord')    return entityend---@param {number} Value"---@returns GameEntityfunction _GameContext:replaceTimeRecord(Value)    local entity = self.timeRecordEntity    if (entity == nil) then        entity = self:setTimeRecord(Value)    else        local component = getComponent(_TimeRecordCP, TimeRecordComponent, Value)        self.timeRecord = component        self.timeRecordEntity = entity        entity:replaceComponent(GameCmpIds.TimeRecord, component, component)    end    return entityend---@return boolfunction _GameContext:hasTimeRecord()    return self:getGroup(GameMatcher.TimeRecord):getSingleEntity() ~= nilendfunction _GameContext:removeTimeRecord()    local old = self.timeRecordEntity    self.timeRecordEntity = nil    self.timeRecord = nil    self:destroyEntity(old)end----------------------------GameIndexes     start---------------------------------------------function _GameContext:initGenerateEntityIndexes()    local PositionGroup = _GameContext:getGroup(GameMatcher.Position)    local PositionPrimaryIndex = Entitas.PrimaryEntityIndex.new(GameCmpIds.Position, PositionGroup, "value")    _GameContext:addEntityIndex(PositionPrimaryIndex)    local ElementTypeGroup = _GameContext:getGroup(GameMatcher.ElementType)    local ElementTypeEntityIndex = Entitas.EntityIndex.new(GameCmpIds.ElementType, ElementTypeGroup, "value")    _GameContext:addEntityIndex(ElementTypeEntityIndex)    local ViewPosGroup = _GameContext:getGroup(GameMatcher.ViewPos)    local ViewPosEntityIndex = Entitas.EntityIndex.new(GameCmpIds.ViewPos, ViewPosGroup, "value")    _GameContext:addEntityIndex(ViewPosEntityIndex)end---@return GameEntityfunction _GameContext:GetEntityByPositionvalue(value)    return self:getEntityIndex(GameCmpIds.Position):getEntity(value)end---@return GameEntityfunction _GameContext:GetEntitiesByElementTypevalue(value)    return self:getEntityIndex(GameCmpIds.ElementType):getEntities(value)end---@return GameEntityfunction _GameContext:GetEntitiesByViewPosvalue(value)    return self:getEntityIndex(GameCmpIds.ViewPos):getEntities(value)end_GameContext:initGenerateEntityIndexes()----------------------------GameIndexes     end---------------------------------------------GameContext = _GameContext----------------------------GameStateEntity     start---------------------------------------------local SocoresComponent = Cp_Types.SocoresComponentlocal TestStateComponent = Cp_Types.TestStateComponentlocal GameStateCmpIds = {    Socores = 1,    TestState = 2,}---@class GameStateEntity---@field socores SocoresComponent---@field testState TestStateComponentlocal GameStateEntity = Entitas.Entity---@class SocoresComponent : IComponent---@field value numberfunction GameStateEntity:clearSocoresCP()    _SocoresCP:clear()end---@return booleanfunction GameStateEntity:hasSocores()  return self:hasComponent(GameStateCmpIds.Socores)end---@param value number---@returns Entitas.Entityfunction GameStateEntity:addSocores (value)    local component = getComponent(_SocoresCP, SocoresComponent, value)    self:addComponent(GameStateCmpIds.Socores, component, 'socores')    return selfendfunction GameStateEntity:replaceSocores (value)    local component = getComponent(_SocoresCP, SocoresComponent, value)    self:replaceComponent(GameStateCmpIds.Socores, component, 'socores')    return selfendfunction GameStateEntity:removeSocores ()    self:removeComponent(GameStateCmpIds.Socores, 'socores')    return selfend---@class TestStateComponent : IComponent---@field value numberfunction GameStateEntity:clearTestStateCP()    _TestStateCP:clear()end---@return booleanfunction GameStateEntity:hasTestState()  return self:hasComponent(GameStateCmpIds.TestState)end---@param value number---@returns Entitas.Entityfunction GameStateEntity:addTestState (value)    local component = getComponent(_TestStateCP, TestStateComponent, value)    self:addComponent(GameStateCmpIds.TestState, component, 'testState')    return selfendfunction GameStateEntity:replaceTestState (value)    local component = getComponent(_TestStateCP, TestStateComponent, value)    self:replaceComponent(GameStateCmpIds.TestState, component, 'testState')    return selfendfunction GameStateEntity:removeTestState ()    self:removeComponent(GameStateCmpIds.TestState, 'testState')    return selfend----------------------------Entity      end-------------------------------------------------------------------------Matcher     start----------------------------------------------@class GameStateMatcher---@field AnyOf fun(...) : GenerateMatcher---@field AllOf fun(...) : GenerateMatcher---@field noneOf fun(...) : GenerateMatcher---@field Socores : GenerateMatcher---@field TestState : GenerateMatcherGameStateMatcher = Entitas.MatcherGameStateMatcher.Socores = GameStateMatcher.AllOf(GameStateCmpIds.Socores)GameStateMatcher.TestState = GameStateMatcher.AllOf(GameStateCmpIds.TestState)----------------------------Matcher     end-------------------------------------------------------------------------Context   start------------------------------------------------@class GameStateContext : _Context---@field GameStateTestStateEntity Entity---@field testState TestStateComponent---@field createEntity fun():GameStateEntitylocal _GameStateContext = Context.new(GameStateCmpIds, #GameStateCmpIds)        ---@param {number} value"---@returns GameStateEntityfunction _GameStateContext:setTestState(value)    if (self:hasTestState()) then        error('TestStateComponent already have')    end    local entity = self:createEntity('testState')    self.testStateEntity = entity    local component = getComponent(_TestStateCP, TestStateComponent, value)    self.testState = component    self.testStateEntity = entity    entity:addComponent(GameStateCmpIds.TestState, component, 'testState')    return entityend---@param {number} value"---@returns GameStateEntityfunction _GameStateContext:replaceTestState(value)    local entity = self.testStateEntity    if (entity == nil) then        entity = self:setTestState(value)    else        local component = getComponent(_TestStateCP, TestStateComponent, value)        self.testState = component        self.testStateEntity = entity        entity:replaceComponent(GameStateCmpIds.TestState, component, component)    end    return entityend---@return boolfunction _GameStateContext:hasTestState()    return self:getGroup(GameStateMatcher.TestState):getSingleEntity() ~= nilendfunction _GameStateContext:removeTestState()    local old = self.testStateEntity    self.testStateEntity = nil    self.testState = nil    self:destroyEntity(old)endGameStateContext = _GameStateContext----------------------------Context    end---------------------------------------------Contexts = {    ---@type GameContext    gameContext = _GameContext,    ---@type GameStateContext    gameStateContext = _GameStateContext,}---@class GenerateMatcher---@field AnyOf fun(...) : GenerateMatcher---@field AllOf fun(...) : GenerateMatcher---@field noneOf fun(self:GenerateMatcher,...) : GenerateMatcher---@field onEntityAdded fun(self:GenerateMatcher)---@field onEntityRemoved fun(self:GenerateMatcher)---@field onEntityAddedOrRemoved fun(self:GenerateMatcher)local ___temp