local _Poollocal CoreComponentIds = {    Movable = 1,    Position = 2,    FramePosition = 3,    GridType = 4,    Destroy = 5,    UnNormalDestroy = 6,    ResetGameBoard = 7,    GameBoardCache = 8,    ViewGrid = 9,    ViewPos = 10,    Angle = 11,    SortOrder = 12,    Scale = 13,    GameBoard = 14,    GameBoardElement = 15,    ElementConfig = 16,    MoveTween = 17,    Input = 18,    Link = 19,    CheckCanEliminate = 20,    Linked = 21,    Health = 22,    Interactive = 23,    Resource = 24,    View = 25,    Score = 26,    Item = 27,    ItemUse = 28,    ItemUsePos = 29,    TimeRecord = 30,    ElementDiedRecord = 31,    MonsterDiedRecord = 32,    MapRecord = 33,    Monster = 34,    IdComponent = 35,    Moving = 36,    ElementFrame = 37,    ElementFrameConfig = 38,    ElementFrameBoardCache = 39,}Entitas.CoreComponentIds = CoreComponentIdslocal Bag = Entitas.Bag----------------------------Entity     start------------------------------------------------@class Entity---@field position PositionComponent---@field framePosition FramePositionComponent---@field gridType GridTypeComponent---@field gameBoardCache GameBoardCacheComponent---@field viewGrid ViewGridComponent---@field viewPos ViewPosComponent---@field angle AngleComponent---@field sortOrder SortOrderComponent---@field scale ScaleComponent---@field gameBoard GameBoardComponent---@field elementConfig ElementConfigComponent---@field moveTween MoveTweenComponent---@field input InputComponent---@field link LinkComponent---@field linked LinkedComponent---@field health HealthComponent---@field resource ResourceComponent---@field view ViewComponent---@field score ScoreComponent---@field item ItemComponent---@field itemUsePos ItemUsePosComponent---@field timeRecord TimeRecordComponent---@field elementDiedRecord ElementDiedRecordComponent---@field monsterDiedRecord MonsterDiedRecordComponent---@field mapRecord MapRecordComponent---@field monster MonsterComponent---@field idComponent IdComponentComponent---@field elementFrameConfig ElementFrameConfigComponent---@field elementFrameBoardCache ElementFrameBoardCacheComponentlocal Entity = Entitas.Entitylocal MovableComponent = {}local DestroyComponent = {}local UnNormalDestroyComponent = {}local ResetGameBoardComponent = {}local GameBoardElementComponent = {}local CheckCanEliminateComponent = {}local InteractiveComponent = {}local ItemUseComponent = {}local MovingComponent = {}local ElementFrameComponent = {}local function getComponent(pool, componentClass)    local component    if pool:size() > 0 then        component = pool:removeLast()    else        component = componentClass:new()    end    return componentend    ---@return Entityfunction Entity:setMovable(v)    if (v ~= self:hasMovable()) then        if (v) then            self:addComponent(CoreComponentIds.Movable, MovableComponent, 'Movable')        else            self:removeComponent(CoreComponentIds.Movable)        end    end    return selfend---@return booleanfunction Entity:hasMovable()  return self:hasComponent(CoreComponentIds.Movable)end    ---@class PositionComponent : IComponent---@field x number---@field y numberlocal PositionComponent = {}---@privatefunction PositionComponent:new()    return setmetatable({}, {__index = PositionComponent})end---@type Entitas.Baglocal _PositionCP = Bag:new()for i=1,16 do  _PositionCP:add(PositionComponent:new())endfunction Entity:clearPositionCP()    _PositionCP:clear()end---@return booleanfunction Entity:hasPosition()  return self:hasComponent(CoreComponentIds.Position)end---@param x number---@param y number---@returns Entitas.Entityfunction Entity:addPosition (x, y)    local component = getComponent(_PositionCP, PositionComponent)    component.x = x;    component.y = y;    self.position = component    self:addComponent(CoreComponentIds.Position, component, 'Position')    return selfendfunction Entity:replacePosition (x, y)    local previousComponent    if self:hasPosition() then        previousComponent = self.position    end    local component = getComponent(_PositionCP, PositionComponent)    component.x = x    component.y = y    self.position = component    self:replaceComponent(CoreComponentIds.Position, component, 'Position')    if (previousComponent ~= nil) then        _PositionCP:add(previousComponent)    end    return selfendfunction Entity:removePosition (x, y)    local component = self.Position    self:removeComponent(CoreComponentIds.Position)    Entitas._PositionCP:add(component)    return selfend    ---@class FramePositionComponent : IComponent---@field x number---@field y number---@field frameIndex WeGame.FrameIndexlocal FramePositionComponent = {}---@privatefunction FramePositionComponent:new()    return setmetatable({}, {__index = FramePositionComponent})end---@type Entitas.Baglocal _FramePositionCP = Bag:new()for i=1,16 do  _FramePositionCP:add(FramePositionComponent:new())endfunction Entity:clearFramePositionCP()    _FramePositionCP:clear()end---@return booleanfunction Entity:hasFramePosition()  return self:hasComponent(CoreComponentIds.FramePosition)end---@param x number---@param y number---@param frameIndex WeGame.FrameIndex---@returns Entitas.Entityfunction Entity:addFramePosition (x, y, frameIndex)    local component = getComponent(_FramePositionCP, FramePositionComponent)    component.x = x;    component.y = y;    component.frameIndex = frameIndex;    self.framePosition = component    self:addComponent(CoreComponentIds.FramePosition, component, 'FramePosition')    return selfendfunction Entity:replaceFramePosition (x, y, frameIndex)    local previousComponent    if self:hasFramePosition() then        previousComponent = self.framePosition    end    local component = getComponent(_FramePositionCP, FramePositionComponent)    component.x = x    component.y = y    component.frameIndex = frameIndex    self.framePosition = component    self:replaceComponent(CoreComponentIds.FramePosition, component, 'FramePosition')    if (previousComponent ~= nil) then        _FramePositionCP:add(previousComponent)    end    return selfendfunction Entity:removeFramePosition (x, y, frameIndex)    local component = self.FramePosition    self:removeComponent(CoreComponentIds.FramePosition)    Entitas._FramePositionCP:add(component)    return selfend    ---@class GridTypeComponent : IComponent---@field gridType WeGame.GridTypelocal GridTypeComponent = {}---@privatefunction GridTypeComponent:new()    return setmetatable({}, {__index = GridTypeComponent})end---@type Entitas.Baglocal _GridTypeCP = Bag:new()for i=1,16 do  _GridTypeCP:add(GridTypeComponent:new())endfunction Entity:clearGridTypeCP()    _GridTypeCP:clear()end---@return booleanfunction Entity:hasGridType()  return self:hasComponent(CoreComponentIds.GridType)end---@param gridType WeGame.GridType---@returns Entitas.Entityfunction Entity:addGridType (gridType)    local component = getComponent(_GridTypeCP, GridTypeComponent)    component.gridType = gridType;    self.gridType = component    self:addComponent(CoreComponentIds.GridType, component, 'GridType')    return selfendfunction Entity:replaceGridType (gridType)    local previousComponent    if self:hasGridType() then        previousComponent = self.gridType    end    local component = getComponent(_GridTypeCP, GridTypeComponent)    component.gridType = gridType    self.gridType = component    self:replaceComponent(CoreComponentIds.GridType, component, 'GridType')    if (previousComponent ~= nil) then        _GridTypeCP:add(previousComponent)    end    return selfendfunction Entity:removeGridType (gridType)    local component = self.GridType    self:removeComponent(CoreComponentIds.GridType)    Entitas._GridTypeCP:add(component)    return selfend    ---@return Entityfunction Entity:setDestroy(v)    if (v ~= self:hasDestroy()) then        if (v) then            self:addComponent(CoreComponentIds.Destroy, DestroyComponent, 'Destroy')        else            self:removeComponent(CoreComponentIds.Destroy)        end    end    return selfend---@return booleanfunction Entity:hasDestroy()  return self:hasComponent(CoreComponentIds.Destroy)end    ---@return Entityfunction Entity:setUnNormalDestroy(v)    if (v ~= self:hasUnNormalDestroy()) then        if (v) then            self:addComponent(CoreComponentIds.UnNormalDestroy, UnNormalDestroyComponent, 'UnNormalDestroy')        else            self:removeComponent(CoreComponentIds.UnNormalDestroy)        end    end    return selfend---@return booleanfunction Entity:hasUnNormalDestroy()  return self:hasComponent(CoreComponentIds.UnNormalDestroy)end    ---@return Entityfunction Entity:setResetGameBoard(v)    if (v ~= self:hasResetGameBoard()) then        if (v) then            self:addComponent(CoreComponentIds.ResetGameBoard, ResetGameBoardComponent, 'ResetGameBoard')        else            self:removeComponent(CoreComponentIds.ResetGameBoard)        end    end    return selfend---@return booleanfunction Entity:hasResetGameBoard()  return self:hasComponent(CoreComponentIds.ResetGameBoard)end    ---@class GameBoardCacheComponent : IComponent---@field grid Array<Array<Entity>>---@field gridTypeArray  {[key---@field gridTypeLength  anylocal GameBoardCacheComponent = {}---@privatefunction GameBoardCacheComponent:new()    return setmetatable({}, {__index = GameBoardCacheComponent})end---@type Entitas.Baglocal _GameBoardCacheCP = Bag:new()for i=1,16 do  _GameBoardCacheCP:add(GameBoardCacheComponent:new())endfunction Entity:clearGameBoardCacheCP()    _GameBoardCacheCP:clear()end---@return booleanfunction Entity:hasGameBoardCache()  return self:hasComponent(CoreComponentIds.GameBoardCache)end---@param grid Array<Array<Entity>>---@param gridTypeArray  {[key---@param gridTypeLength  any---@returns Entitas.Entityfunction Entity:addGameBoardCache (grid, gridTypeArray, gridTypeLength)    local component = getComponent(_GameBoardCacheCP, GameBoardCacheComponent)    component.grid = grid;    component.gridTypeArray = gridTypeArray;    component.gridTypeLength = gridTypeLength;    self.gameBoardCache = component    self:addComponent(CoreComponentIds.GameBoardCache, component, 'GameBoardCache')    return selfendfunction Entity:replaceGameBoardCache (grid, gridTypeArray, gridTypeLength)    local previousComponent    if self:hasGameBoardCache() then        previousComponent = self.gameBoardCache    end    local component = getComponent(_GameBoardCacheCP, GameBoardCacheComponent)    component.grid = grid    component.gridTypeArray = gridTypeArray    component.gridTypeLength = gridTypeLength    self.gameBoardCache = component    self:replaceComponent(CoreComponentIds.GameBoardCache, component, 'GameBoardCache')    if (previousComponent ~= nil) then        _GameBoardCacheCP:add(previousComponent)    end    return selfendfunction Entity:removeGameBoardCache (grid, gridTypeArray, gridTypeLength)    local component = self.GameBoardCache    self:removeComponent(CoreComponentIds.GameBoardCache)    Entitas._GameBoardCacheCP:add(component)    return selfend    ---@class ViewGridComponent : IComponent---@field value  {[keylocal ViewGridComponent = {}---@privatefunction ViewGridComponent:new()    return setmetatable({}, {__index = ViewGridComponent})end---@type Entitas.Baglocal _ViewGridCP = Bag:new()for i=1,16 do  _ViewGridCP:add(ViewGridComponent:new())endfunction Entity:clearViewGridCP()    _ViewGridCP:clear()end---@return booleanfunction Entity:hasViewGrid()  return self:hasComponent(CoreComponentIds.ViewGrid)end---@param value  {[key---@returns Entitas.Entityfunction Entity:addViewGrid (value)    local component = getComponent(_ViewGridCP, ViewGridComponent)    component.value = value;    self.viewGrid = component    self:addComponent(CoreComponentIds.ViewGrid, component, 'ViewGrid')    return selfendfunction Entity:replaceViewGrid (value)    local previousComponent    if self:hasViewGrid() then        previousComponent = self.viewGrid    end    local component = getComponent(_ViewGridCP, ViewGridComponent)    component.value = value    self.viewGrid = component    self:replaceComponent(CoreComponentIds.ViewGrid, component, 'ViewGrid')    if (previousComponent ~= nil) then        _ViewGridCP:add(previousComponent)    end    return selfendfunction Entity:removeViewGrid (value)    local component = self.ViewGrid    self:removeComponent(CoreComponentIds.ViewGrid)    Entitas._ViewGridCP:add(component)    return selfend    ---@class ViewPosComponent : IComponent---@field x   number---@field y   numberlocal ViewPosComponent = {}---@privatefunction ViewPosComponent:new()    return setmetatable({}, {__index = ViewPosComponent})end---@type Entitas.Baglocal _ViewPosCP = Bag:new()for i=1,16 do  _ViewPosCP:add(ViewPosComponent:new())endfunction Entity:clearViewPosCP()    _ViewPosCP:clear()end---@return booleanfunction Entity:hasViewPos()  return self:hasComponent(CoreComponentIds.ViewPos)end---@param x   number---@param y   number---@returns Entitas.Entityfunction Entity:addViewPos (x , y )    local component = getComponent(_ViewPosCP, ViewPosComponent)    component.x  = x ;    component.y  = y ;    self.viewPos = component    self:addComponent(CoreComponentIds.ViewPos, component, 'ViewPos')    return selfendfunction Entity:replaceViewPos (x , y )    local previousComponent    if self:hasViewPos() then        previousComponent = self.viewPos    end    local component = getComponent(_ViewPosCP, ViewPosComponent)    component.x  = x     component.y  = y     self.viewPos = component    self:replaceComponent(CoreComponentIds.ViewPos, component, 'ViewPos')    if (previousComponent ~= nil) then        _ViewPosCP:add(previousComponent)    end    return selfendfunction Entity:removeViewPos (x , y )    local component = self.ViewPos    self:removeComponent(CoreComponentIds.ViewPos)    Entitas._ViewPosCP:add(component)    return selfend    ---@class AngleComponent : IComponent---@field value   numberlocal AngleComponent = {}---@privatefunction AngleComponent:new()    return setmetatable({}, {__index = AngleComponent})end---@type Entitas.Baglocal _AngleCP = Bag:new()for i=1,16 do  _AngleCP:add(AngleComponent:new())endfunction Entity:clearAngleCP()    _AngleCP:clear()end---@return booleanfunction Entity:hasAngle()  return self:hasComponent(CoreComponentIds.Angle)end---@param value   number---@returns Entitas.Entityfunction Entity:addAngle (value )    local component = getComponent(_AngleCP, AngleComponent)    component.value  = value ;    self.angle = component    self:addComponent(CoreComponentIds.Angle, component, 'Angle')    return selfendfunction Entity:replaceAngle (value )    local previousComponent    if self:hasAngle() then        previousComponent = self.angle    end    local component = getComponent(_AngleCP, AngleComponent)    component.value  = value     self.angle = component    self:replaceComponent(CoreComponentIds.Angle, component, 'Angle')    if (previousComponent ~= nil) then        _AngleCP:add(previousComponent)    end    return selfendfunction Entity:removeAngle (value )    local component = self.Angle    self:removeComponent(CoreComponentIds.Angle)    Entitas._AngleCP:add(component)    return selfend    ---@class SortOrderComponent : IComponent---@field value   numberlocal SortOrderComponent = {}---@privatefunction SortOrderComponent:new()    return setmetatable({}, {__index = SortOrderComponent})end---@type Entitas.Baglocal _SortOrderCP = Bag:new()for i=1,16 do  _SortOrderCP:add(SortOrderComponent:new())endfunction Entity:clearSortOrderCP()    _SortOrderCP:clear()end---@return booleanfunction Entity:hasSortOrder()  return self:hasComponent(CoreComponentIds.SortOrder)end---@param value   number---@returns Entitas.Entityfunction Entity:addSortOrder (value )    local component = getComponent(_SortOrderCP, SortOrderComponent)    component.value  = value ;    self.sortOrder = component    self:addComponent(CoreComponentIds.SortOrder, component, 'SortOrder')    return selfendfunction Entity:replaceSortOrder (value )    local previousComponent    if self:hasSortOrder() then        previousComponent = self.sortOrder    end    local component = getComponent(_SortOrderCP, SortOrderComponent)    component.value  = value     self.sortOrder = component    self:replaceComponent(CoreComponentIds.SortOrder, component, 'SortOrder')    if (previousComponent ~= nil) then        _SortOrderCP:add(previousComponent)    end    return selfendfunction Entity:removeSortOrder (value )    local component = self.SortOrder    self:removeComponent(CoreComponentIds.SortOrder)    Entitas._SortOrderCP:add(component)    return selfend    ---@class ScaleComponent : IComponent---@field value   numberlocal ScaleComponent = {}---@privatefunction ScaleComponent:new()    return setmetatable({}, {__index = ScaleComponent})end---@type Entitas.Baglocal _ScaleCP = Bag:new()for i=1,16 do  _ScaleCP:add(ScaleComponent:new())endfunction Entity:clearScaleCP()    _ScaleCP:clear()end---@return booleanfunction Entity:hasScale()  return self:hasComponent(CoreComponentIds.Scale)end---@param value   number---@returns Entitas.Entityfunction Entity:addScale (value )    local component = getComponent(_ScaleCP, ScaleComponent)    component.value  = value ;    self.scale = component    self:addComponent(CoreComponentIds.Scale, component, 'Scale')    return selfendfunction Entity:replaceScale (value )    local previousComponent    if self:hasScale() then        previousComponent = self.scale    end    local component = getComponent(_ScaleCP, ScaleComponent)    component.value  = value     self.scale = component    self:replaceComponent(CoreComponentIds.Scale, component, 'Scale')    if (previousComponent ~= nil) then        _ScaleCP:add(previousComponent)    end    return selfendfunction Entity:removeScale (value )    local component = self.Scale    self:removeComponent(CoreComponentIds.Scale)    Entitas._ScaleCP:add(component)    return selfend    ---@class GameBoardComponent : IComponent---@field levelName string---@field rows   number---@field columns   number---@field levelConfig Config.LevelMapConfiglocal GameBoardComponent = {}---@privatefunction GameBoardComponent:new()    return setmetatable({}, {__index = GameBoardComponent})end---@type Entitas.Baglocal _GameBoardCP = Bag:new()for i=1,16 do  _GameBoardCP:add(GameBoardComponent:new())endfunction Entity:clearGameBoardCP()    _GameBoardCP:clear()end---@return booleanfunction Entity:hasGameBoard()  return self:hasComponent(CoreComponentIds.GameBoard)end---@param levelName string---@param rows   number---@param columns   number---@param levelConfig Config.LevelMapConfig---@returns Entitas.Entityfunction Entity:addGameBoard (levelName, rows , columns , levelConfig)    local component = getComponent(_GameBoardCP, GameBoardComponent)    component.levelName = levelName;    component.rows  = rows ;    component.columns  = columns ;    component.levelConfig = levelConfig;    self.gameBoard = component    self:addComponent(CoreComponentIds.GameBoard, component, 'GameBoard')    return selfendfunction Entity:replaceGameBoard (levelName, rows , columns , levelConfig)    local previousComponent    if self:hasGameBoard() then        previousComponent = self.gameBoard    end    local component = getComponent(_GameBoardCP, GameBoardComponent)    component.levelName = levelName    component.rows  = rows     component.columns  = columns     component.levelConfig = levelConfig    self.gameBoard = component    self:replaceComponent(CoreComponentIds.GameBoard, component, 'GameBoard')    if (previousComponent ~= nil) then        _GameBoardCP:add(previousComponent)    end    return selfendfunction Entity:removeGameBoard (levelName, rows , columns , levelConfig)    local component = self.GameBoard    self:removeComponent(CoreComponentIds.GameBoard)    Entitas._GameBoardCP:add(component)    return selfend    ---@return Entityfunction Entity:setGameBoardElement(v)    if (v ~= self:hasGameBoardElement()) then        if (v) then            self:addComponent(CoreComponentIds.GameBoardElement, GameBoardElementComponent, 'GameBoardElement')        else            self:removeComponent(CoreComponentIds.GameBoardElement)        end    end    return selfend---@return booleanfunction Entity:hasGameBoardElement()  return self:hasComponent(CoreComponentIds.GameBoardElement)end    ---@class ElementConfigComponent : IComponent---@field config   Config.Elementlocal ElementConfigComponent = {}---@privatefunction ElementConfigComponent:new()    return setmetatable({}, {__index = ElementConfigComponent})end---@type Entitas.Baglocal _ElementConfigCP = Bag:new()for i=1,16 do  _ElementConfigCP:add(ElementConfigComponent:new())endfunction Entity:clearElementConfigCP()    _ElementConfigCP:clear()end---@return booleanfunction Entity:hasElementConfig()  return self:hasComponent(CoreComponentIds.ElementConfig)end---@param config   Config.Element---@returns Entitas.Entityfunction Entity:addElementConfig (config )    local component = getComponent(_ElementConfigCP, ElementConfigComponent)    component.config  = config ;    self.elementConfig = component    self:addComponent(CoreComponentIds.ElementConfig, component, 'ElementConfig')    return selfendfunction Entity:replaceElementConfig (config )    local previousComponent    if self:hasElementConfig() then        previousComponent = self.elementConfig    end    local component = getComponent(_ElementConfigCP, ElementConfigComponent)    component.config  = config     self.elementConfig = component    self:replaceComponent(CoreComponentIds.ElementConfig, component, 'ElementConfig')    if (previousComponent ~= nil) then        _ElementConfigCP:add(previousComponent)    end    return selfendfunction Entity:removeElementConfig (config )    local component = self.ElementConfig    self:removeComponent(CoreComponentIds.ElementConfig)    Entitas._ElementConfigCP:add(component)    return selfend    ---@class MoveTweenComponent : IComponent---@field posArray   Array<Laya.Point>local MoveTweenComponent = {}---@privatefunction MoveTweenComponent:new()    return setmetatable({}, {__index = MoveTweenComponent})end---@type Entitas.Baglocal _MoveTweenCP = Bag:new()for i=1,16 do  _MoveTweenCP:add(MoveTweenComponent:new())endfunction Entity:clearMoveTweenCP()    _MoveTweenCP:clear()end---@return booleanfunction Entity:hasMoveTween()  return self:hasComponent(CoreComponentIds.MoveTween)end---@param posArray   Array<Laya.Point>---@returns Entitas.Entityfunction Entity:addMoveTween (posArray )    local component = getComponent(_MoveTweenCP, MoveTweenComponent)    component.posArray  = posArray ;    self.moveTween = component    self:addComponent(CoreComponentIds.MoveTween, component, 'MoveTween')    return selfendfunction Entity:replaceMoveTween (posArray )    local previousComponent    if self:hasMoveTween() then        previousComponent = self.moveTween    end    local component = getComponent(_MoveTweenCP, MoveTweenComponent)    component.posArray  = posArray     self.moveTween = component    self:replaceComponent(CoreComponentIds.MoveTween, component, 'MoveTween')    if (previousComponent ~= nil) then        _MoveTweenCP:add(previousComponent)    end    return selfendfunction Entity:removeMoveTween (posArray )    local component = self.MoveTween    self:removeComponent(CoreComponentIds.MoveTween)    Entitas._MoveTweenCP:add(component)    return selfend    ---@class InputComponent : IComponent---@field x number---@field y number---@field touchType  WeGame.TouchTypelocal InputComponent = {}---@privatefunction InputComponent:new()    return setmetatable({}, {__index = InputComponent})end---@type Entitas.Baglocal _InputCP = Bag:new()for i=1,16 do  _InputCP:add(InputComponent:new())endfunction Entity:clearInputCP()    _InputCP:clear()end---@return booleanfunction Entity:hasInput()  return self:hasComponent(CoreComponentIds.Input)end---@param x number---@param y number---@param touchType  WeGame.TouchType---@returns Entitas.Entityfunction Entity:addInput (x, y, touchType)    local component = getComponent(_InputCP, InputComponent)    component.x = x;    component.y = y;    component.touchType = touchType;    self.input = component    self:addComponent(CoreComponentIds.Input, component, 'Input')    return selfendfunction Entity:replaceInput (x, y, touchType)    local previousComponent    if self:hasInput() then        previousComponent = self.input    end    local component = getComponent(_InputCP, InputComponent)    component.x = x    component.y = y    component.touchType = touchType    self.input = component    self:replaceComponent(CoreComponentIds.Input, component, 'Input')    if (previousComponent ~= nil) then        _InputCP:add(previousComponent)    end    return selfendfunction Entity:removeInput (x, y, touchType)    local component = self.Input    self:removeComponent(CoreComponentIds.Input)    Entitas._InputCP:add(component)    return selfend    ---@class LinkComponent : IComponent---@field linkArray Array<Entity>---@field gridType WeGame.GridTypelocal LinkComponent = {}---@privatefunction LinkComponent:new()    return setmetatable({}, {__index = LinkComponent})end---@type Entitas.Baglocal _LinkCP = Bag:new()for i=1,16 do  _LinkCP:add(LinkComponent:new())endfunction Entity:clearLinkCP()    _LinkCP:clear()end---@return booleanfunction Entity:hasLink()  return self:hasComponent(CoreComponentIds.Link)end---@param linkArray Array<Entity>---@param gridType WeGame.GridType---@returns Entitas.Entityfunction Entity:addLink (linkArray, gridType)    local component = getComponent(_LinkCP, LinkComponent)    component.linkArray = linkArray;    component.gridType = gridType;    self.link = component    self:addComponent(CoreComponentIds.Link, component, 'Link')    return selfendfunction Entity:replaceLink (linkArray, gridType)    local previousComponent    if self:hasLink() then        previousComponent = self.link    end    local component = getComponent(_LinkCP, LinkComponent)    component.linkArray = linkArray    component.gridType = gridType    self.link = component    self:replaceComponent(CoreComponentIds.Link, component, 'Link')    if (previousComponent ~= nil) then        _LinkCP:add(previousComponent)    end    return selfendfunction Entity:removeLink (linkArray, gridType)    local component = self.Link    self:removeComponent(CoreComponentIds.Link)    Entitas._LinkCP:add(component)    return selfend    ---@return Entityfunction Entity:setCheckCanEliminate(v)    if (v ~= self:hasCheckCanEliminate()) then        if (v) then            self:addComponent(CoreComponentIds.CheckCanEliminate, CheckCanEliminateComponent, 'CheckCanEliminate')        else            self:removeComponent(CoreComponentIds.CheckCanEliminate)        end    end    return selfend---@return booleanfunction Entity:hasCheckCanEliminate()  return self:hasComponent(CoreComponentIds.CheckCanEliminate)end    ---@class LinkedComponent : IComponent---@field index numberlocal LinkedComponent = {}---@privatefunction LinkedComponent:new()    return setmetatable({}, {__index = LinkedComponent})end---@type Entitas.Baglocal _LinkedCP = Bag:new()for i=1,16 do  _LinkedCP:add(LinkedComponent:new())endfunction Entity:clearLinkedCP()    _LinkedCP:clear()end---@return booleanfunction Entity:hasLinked()  return self:hasComponent(CoreComponentIds.Linked)end---@param index number---@returns Entitas.Entityfunction Entity:addLinked (index)    local component = getComponent(_LinkedCP, LinkedComponent)    component.index = index;    self.linked = component    self:addComponent(CoreComponentIds.Linked, component, 'Linked')    return selfendfunction Entity:replaceLinked (index)    local previousComponent    if self:hasLinked() then        previousComponent = self.linked    end    local component = getComponent(_LinkedCP, LinkedComponent)    component.index = index    self.linked = component    self:replaceComponent(CoreComponentIds.Linked, component, 'Linked')    if (previousComponent ~= nil) then        _LinkedCP:add(previousComponent)    end    return selfendfunction Entity:removeLinked (index)    local component = self.Linked    self:removeComponent(CoreComponentIds.Linked)    Entitas._LinkedCP:add(component)    return selfend    ---@class HealthComponent : IComponent---@field hp   numberlocal HealthComponent = {}---@privatefunction HealthComponent:new()    return setmetatable({}, {__index = HealthComponent})end---@type Entitas.Baglocal _HealthCP = Bag:new()for i=1,16 do  _HealthCP:add(HealthComponent:new())endfunction Entity:clearHealthCP()    _HealthCP:clear()end---@return booleanfunction Entity:hasHealth()  return self:hasComponent(CoreComponentIds.Health)end---@param hp   number---@returns Entitas.Entityfunction Entity:addHealth (hp )    local component = getComponent(_HealthCP, HealthComponent)    component.hp  = hp ;    self.health = component    self:addComponent(CoreComponentIds.Health, component, 'Health')    return selfendfunction Entity:replaceHealth (hp )    local previousComponent    if self:hasHealth() then        previousComponent = self.health    end    local component = getComponent(_HealthCP, HealthComponent)    component.hp  = hp     self.health = component    self:replaceComponent(CoreComponentIds.Health, component, 'Health')    if (previousComponent ~= nil) then        _HealthCP:add(previousComponent)    end    return selfendfunction Entity:removeHealth (hp )    local component = self.Health    self:removeComponent(CoreComponentIds.Health)    Entitas._HealthCP:add(component)    return selfend    ---@return Entityfunction Entity:setInteractive(v)    if (v ~= self:hasInteractive()) then        if (v) then            self:addComponent(CoreComponentIds.Interactive, InteractiveComponent, 'Interactive')        else            self:removeComponent(CoreComponentIds.Interactive)        end    end    return selfend---@return booleanfunction Entity:hasInteractive()  return self:hasComponent(CoreComponentIds.Interactive)end    ---@class ResourceComponent : IComponent---@field name stringlocal ResourceComponent = {}---@privatefunction ResourceComponent:new()    return setmetatable({}, {__index = ResourceComponent})end---@type Entitas.Baglocal _ResourceCP = Bag:new()for i=1,16 do  _ResourceCP:add(ResourceComponent:new())endfunction Entity:clearResourceCP()    _ResourceCP:clear()end---@return booleanfunction Entity:hasResource()  return self:hasComponent(CoreComponentIds.Resource)end---@param name string---@returns Entitas.Entityfunction Entity:addResource (name)    local component = getComponent(_ResourceCP, ResourceComponent)    component.name = name;    self.resource = component    self:addComponent(CoreComponentIds.Resource, component, 'Resource')    return selfendfunction Entity:replaceResource (name)    local previousComponent    if self:hasResource() then        previousComponent = self.resource    end    local component = getComponent(_ResourceCP, ResourceComponent)    component.name = name    self.resource = component    self:replaceComponent(CoreComponentIds.Resource, component, 'Resource')    if (previousComponent ~= nil) then        _ResourceCP:add(previousComponent)    end    return selfendfunction Entity:removeResource (name)    local component = self.Resource    self:removeComponent(CoreComponentIds.Resource)    Entitas._ResourceCP:add(component)    return selfend    ---@class ViewComponent : IComponent---@field sprite anylocal ViewComponent = {}---@privatefunction ViewComponent:new()    return setmetatable({}, {__index = ViewComponent})end---@type Entitas.Baglocal _ViewCP = Bag:new()for i=1,16 do  _ViewCP:add(ViewComponent:new())endfunction Entity:clearViewCP()    _ViewCP:clear()end---@return booleanfunction Entity:hasView()  return self:hasComponent(CoreComponentIds.View)end---@param sprite any---@returns Entitas.Entityfunction Entity:addView (sprite)    local component = getComponent(_ViewCP, ViewComponent)    component.sprite = sprite;    self.view = component    self:addComponent(CoreComponentIds.View, component, 'View')    return selfendfunction Entity:replaceView (sprite)    local previousComponent    if self:hasView() then        previousComponent = self.view    end    local component = getComponent(_ViewCP, ViewComponent)    component.sprite = sprite    self.view = component    self:replaceComponent(CoreComponentIds.View, component, 'View')    if (previousComponent ~= nil) then        _ViewCP:add(previousComponent)    end    return selfendfunction Entity:removeView (sprite)    local component = self.View    self:removeComponent(CoreComponentIds.View)    Entitas._ViewCP:add(component)    return selfend    ---@class ScoreComponent : IComponent---@field value numberlocal ScoreComponent = {}---@privatefunction ScoreComponent:new()    return setmetatable({}, {__index = ScoreComponent})end---@type Entitas.Baglocal _ScoreCP = Bag:new()for i=1,16 do  _ScoreCP:add(ScoreComponent:new())endfunction Entity:clearScoreCP()    _ScoreCP:clear()end---@return booleanfunction Entity:hasScore()  return self:hasComponent(CoreComponentIds.Score)end---@param value number---@returns Entitas.Entityfunction Entity:addScore (value)    local component = getComponent(_ScoreCP, ScoreComponent)    component.value = value;    self.score = component    self:addComponent(CoreComponentIds.Score, component, 'Score')    return selfendfunction Entity:replaceScore (value)    local previousComponent    if self:hasScore() then        previousComponent = self.score    end    local component = getComponent(_ScoreCP, ScoreComponent)    component.value = value    self.score = component    self:replaceComponent(CoreComponentIds.Score, component, 'Score')    if (previousComponent ~= nil) then        _ScoreCP:add(previousComponent)    end    return selfendfunction Entity:removeScore (value)    local component = self.Score    self:removeComponent(CoreComponentIds.Score)    Entitas._ScoreCP:add(component)    return selfend    ---@class ItemComponent : IComponent---@field itemId number---@field itemNum numberlocal ItemComponent = {}---@privatefunction ItemComponent:new()    return setmetatable({}, {__index = ItemComponent})end---@type Entitas.Baglocal _ItemCP = Bag:new()for i=1,16 do  _ItemCP:add(ItemComponent:new())endfunction Entity:clearItemCP()    _ItemCP:clear()end---@return booleanfunction Entity:hasItem()  return self:hasComponent(CoreComponentIds.Item)end---@param itemId number---@param itemNum number---@returns Entitas.Entityfunction Entity:addItem (itemId, itemNum)    local component = getComponent(_ItemCP, ItemComponent)    component.itemId = itemId;    component.itemNum = itemNum;    self.item = component    self:addComponent(CoreComponentIds.Item, component, 'Item')    return selfendfunction Entity:replaceItem (itemId, itemNum)    local previousComponent    if self:hasItem() then        previousComponent = self.item    end    local component = getComponent(_ItemCP, ItemComponent)    component.itemId = itemId    component.itemNum = itemNum    self.item = component    self:replaceComponent(CoreComponentIds.Item, component, 'Item')    if (previousComponent ~= nil) then        _ItemCP:add(previousComponent)    end    return selfendfunction Entity:removeItem (itemId, itemNum)    local component = self.Item    self:removeComponent(CoreComponentIds.Item)    Entitas._ItemCP:add(component)    return selfend    ---@return Entityfunction Entity:setItemUse(v)    if (v ~= self:hasItemUse()) then        if (v) then            self:addComponent(CoreComponentIds.ItemUse, ItemUseComponent, 'ItemUse')        else            self:removeComponent(CoreComponentIds.ItemUse)        end    end    return selfend---@return booleanfunction Entity:hasItemUse()  return self:hasComponent(CoreComponentIds.ItemUse)end    ---@class ItemUsePosComponent : IComponent---@field posX   number---@field posY   numberlocal ItemUsePosComponent = {}---@privatefunction ItemUsePosComponent:new()    return setmetatable({}, {__index = ItemUsePosComponent})end---@type Entitas.Baglocal _ItemUsePosCP = Bag:new()for i=1,16 do  _ItemUsePosCP:add(ItemUsePosComponent:new())endfunction Entity:clearItemUsePosCP()    _ItemUsePosCP:clear()end---@return booleanfunction Entity:hasItemUsePos()  return self:hasComponent(CoreComponentIds.ItemUsePos)end---@param posX   number---@param posY   number---@returns Entitas.Entityfunction Entity:addItemUsePos (posX , posY )    local component = getComponent(_ItemUsePosCP, ItemUsePosComponent)    component.posX  = posX ;    component.posY  = posY ;    self.itemUsePos = component    self:addComponent(CoreComponentIds.ItemUsePos, component, 'ItemUsePos')    return selfendfunction Entity:replaceItemUsePos (posX , posY )    local previousComponent    if self:hasItemUsePos() then        previousComponent = self.itemUsePos    end    local component = getComponent(_ItemUsePosCP, ItemUsePosComponent)    component.posX  = posX     component.posY  = posY     self.itemUsePos = component    self:replaceComponent(CoreComponentIds.ItemUsePos, component, 'ItemUsePos')    if (previousComponent ~= nil) then        _ItemUsePosCP:add(previousComponent)    end    return selfendfunction Entity:removeItemUsePos (posX , posY )    local component = self.ItemUsePos    self:removeComponent(CoreComponentIds.ItemUsePos)    Entitas._ItemUsePosCP:add(component)    return selfend    ---@class TimeRecordComponent : IComponent---@field Value   numberlocal TimeRecordComponent = {}---@privatefunction TimeRecordComponent:new()    return setmetatable({}, {__index = TimeRecordComponent})end---@type Entitas.Baglocal _TimeRecordCP = Bag:new()for i=1,16 do  _TimeRecordCP:add(TimeRecordComponent:new())endfunction Entity:clearTimeRecordCP()    _TimeRecordCP:clear()end---@return booleanfunction Entity:hasTimeRecord()  return self:hasComponent(CoreComponentIds.TimeRecord)end---@param Value   number---@returns Entitas.Entityfunction Entity:addTimeRecord (Value )    local component = getComponent(_TimeRecordCP, TimeRecordComponent)    component.Value  = Value ;    self.timeRecord = component    self:addComponent(CoreComponentIds.TimeRecord, component, 'TimeRecord')    return selfendfunction Entity:replaceTimeRecord (Value )    local previousComponent    if self:hasTimeRecord() then        previousComponent = self.timeRecord    end    local component = getComponent(_TimeRecordCP, TimeRecordComponent)    component.Value  = Value     self.timeRecord = component    self:replaceComponent(CoreComponentIds.TimeRecord, component, 'TimeRecord')    if (previousComponent ~= nil) then        _TimeRecordCP:add(previousComponent)    end    return selfendfunction Entity:removeTimeRecord (Value )    local component = self.TimeRecord    self:removeComponent(CoreComponentIds.TimeRecord)    Entitas._TimeRecordCP:add(component)    return selfend    ---@class ElementDiedRecordComponent : IComponentlocal ElementDiedRecordComponent = {}---@privatefunction ElementDiedRecordComponent:new()    return setmetatable({}, {__index = ElementDiedRecordComponent})end---@type Entitas.Baglocal _ElementDiedRecordCP = Bag:new()for i=1,16 do  _ElementDiedRecordCP:add(ElementDiedRecordComponent:new())endfunction Entity:clearElementDiedRecordCP()    _ElementDiedRecordCP:clear()end---@return booleanfunction Entity:hasElementDiedRecord()  return self:hasComponent(CoreComponentIds.ElementDiedRecord)end---@returns Entitas.Entityfunction Entity:addElementDiedRecord ()    local component = getComponent(_ElementDiedRecordCP, ElementDiedRecordComponent)    self.elementDiedRecord = component    self:addComponent(CoreComponentIds.ElementDiedRecord, component, 'ElementDiedRecord')    return selfendfunction Entity:replaceElementDiedRecord ()    local previousComponent    if self:hasElementDiedRecord() then        previousComponent = self.elementDiedRecord    end    local component = getComponent(_ElementDiedRecordCP, ElementDiedRecordComponent)    self.elementDiedRecord = component    self:replaceComponent(CoreComponentIds.ElementDiedRecord, component, 'ElementDiedRecord')    if (previousComponent ~= nil) then        _ElementDiedRecordCP:add(previousComponent)    end    return selfendfunction Entity:removeElementDiedRecord ()    local component = self.ElementDiedRecord    self:removeComponent(CoreComponentIds.ElementDiedRecord)    Entitas._ElementDiedRecordCP:add(component)    return selfend    ---@class MonsterDiedRecordComponent : IComponentlocal MonsterDiedRecordComponent = {}---@privatefunction MonsterDiedRecordComponent:new()    return setmetatable({}, {__index = MonsterDiedRecordComponent})end---@type Entitas.Baglocal _MonsterDiedRecordCP = Bag:new()for i=1,16 do  _MonsterDiedRecordCP:add(MonsterDiedRecordComponent:new())endfunction Entity:clearMonsterDiedRecordCP()    _MonsterDiedRecordCP:clear()end---@return booleanfunction Entity:hasMonsterDiedRecord()  return self:hasComponent(CoreComponentIds.MonsterDiedRecord)end---@returns Entitas.Entityfunction Entity:addMonsterDiedRecord ()    local component = getComponent(_MonsterDiedRecordCP, MonsterDiedRecordComponent)    self.monsterDiedRecord = component    self:addComponent(CoreComponentIds.MonsterDiedRecord, component, 'MonsterDiedRecord')    return selfendfunction Entity:replaceMonsterDiedRecord ()    local previousComponent    if self:hasMonsterDiedRecord() then        previousComponent = self.monsterDiedRecord    end    local component = getComponent(_MonsterDiedRecordCP, MonsterDiedRecordComponent)    self.monsterDiedRecord = component    self:replaceComponent(CoreComponentIds.MonsterDiedRecord, component, 'MonsterDiedRecord')    if (previousComponent ~= nil) then        _MonsterDiedRecordCP:add(previousComponent)    end    return selfendfunction Entity:removeMonsterDiedRecord ()    local component = self.MonsterDiedRecord    self:removeComponent(CoreComponentIds.MonsterDiedRecord)    Entitas._MonsterDiedRecordCP:add(component)    return selfend    ---@class MapRecordComponent : IComponent---@field value   {[keylocal MapRecordComponent = {}---@privatefunction MapRecordComponent:new()    return setmetatable({}, {__index = MapRecordComponent})end---@type Entitas.Baglocal _MapRecordCP = Bag:new()for i=1,16 do  _MapRecordCP:add(MapRecordComponent:new())endfunction Entity:clearMapRecordCP()    _MapRecordCP:clear()end---@return booleanfunction Entity:hasMapRecord()  return self:hasComponent(CoreComponentIds.MapRecord)end---@param value   {[key---@returns Entitas.Entityfunction Entity:addMapRecord (value )    local component = getComponent(_MapRecordCP, MapRecordComponent)    component.value  = value ;    self.mapRecord = component    self:addComponent(CoreComponentIds.MapRecord, component, 'MapRecord')    return selfendfunction Entity:replaceMapRecord (value )    local previousComponent    if self:hasMapRecord() then        previousComponent = self.mapRecord    end    local component = getComponent(_MapRecordCP, MapRecordComponent)    component.value  = value     self.mapRecord = component    self:replaceComponent(CoreComponentIds.MapRecord, component, 'MapRecord')    if (previousComponent ~= nil) then        _MapRecordCP:add(previousComponent)    end    return selfendfunction Entity:removeMapRecord (value )    local component = self.MapRecord    self:removeComponent(CoreComponentIds.MapRecord)    Entitas._MapRecordCP:add(component)    return selfend    ---@class MonsterComponent : IComponent---@field config   Config.MonsterConfiglocal MonsterComponent = {}---@privatefunction MonsterComponent:new()    return setmetatable({}, {__index = MonsterComponent})end---@type Entitas.Baglocal _MonsterCP = Bag:new()for i=1,16 do  _MonsterCP:add(MonsterComponent:new())endfunction Entity:clearMonsterCP()    _MonsterCP:clear()end---@return booleanfunction Entity:hasMonster()  return self:hasComponent(CoreComponentIds.Monster)end---@param config   Config.MonsterConfig---@returns Entitas.Entityfunction Entity:addMonster (config )    local component = getComponent(_MonsterCP, MonsterComponent)    component.config  = config ;    self.monster = component    self:addComponent(CoreComponentIds.Monster, component, 'Monster')    return selfendfunction Entity:replaceMonster (config )    local previousComponent    if self:hasMonster() then        previousComponent = self.monster    end    local component = getComponent(_MonsterCP, MonsterComponent)    component.config  = config     self.monster = component    self:replaceComponent(CoreComponentIds.Monster, component, 'Monster')    if (previousComponent ~= nil) then        _MonsterCP:add(previousComponent)    end    return selfendfunction Entity:removeMonster (config )    local component = self.Monster    self:removeComponent(CoreComponentIds.Monster)    Entitas._MonsterCP:add(component)    return selfend    ---@class IdComponentComponent : IComponent---@field value  numberlocal IdComponentComponent = {}---@privatefunction IdComponentComponent:new()    return setmetatable({}, {__index = IdComponentComponent})end---@type Entitas.Baglocal _IdComponentCP = Bag:new()for i=1,16 do  _IdComponentCP:add(IdComponentComponent:new())endfunction Entity:clearIdComponentCP()    _IdComponentCP:clear()end---@return booleanfunction Entity:hasIdComponent()  return self:hasComponent(CoreComponentIds.IdComponent)end---@param value  number---@returns Entitas.Entityfunction Entity:addIdComponent (value)    local component = getComponent(_IdComponentCP, IdComponentComponent)    component.value = value;    self.idComponent = component    self:addComponent(CoreComponentIds.IdComponent, component, 'IdComponent')    return selfendfunction Entity:replaceIdComponent (value)    local previousComponent    if self:hasIdComponent() then        previousComponent = self.idComponent    end    local component = getComponent(_IdComponentCP, IdComponentComponent)    component.value = value    self.idComponent = component    self:replaceComponent(CoreComponentIds.IdComponent, component, 'IdComponent')    if (previousComponent ~= nil) then        _IdComponentCP:add(previousComponent)    end    return selfendfunction Entity:removeIdComponent (value)    local component = self.IdComponent    self:removeComponent(CoreComponentIds.IdComponent)    Entitas._IdComponentCP:add(component)    return selfend    ---@return Entityfunction Entity:setMoving(v)    if (v ~= self:hasMoving()) then        if (v) then            self:addComponent(CoreComponentIds.Moving, MovingComponent, 'Moving')        else            self:removeComponent(CoreComponentIds.Moving)        end    end    return selfend---@return booleanfunction Entity:hasMoving()  return self:hasComponent(CoreComponentIds.Moving)end    ---@return Entityfunction Entity:setElementFrame(v)    if (v ~= self:hasElementFrame()) then        if (v) then            self:addComponent(CoreComponentIds.ElementFrame, ElementFrameComponent, 'ElementFrame')        else            self:removeComponent(CoreComponentIds.ElementFrame)        end    end    return selfend---@return booleanfunction Entity:hasElementFrame()  return self:hasComponent(CoreComponentIds.ElementFrame)end    ---@class ElementFrameConfigComponent : IComponent---@field value   Config.ElementFramelocal ElementFrameConfigComponent = {}---@privatefunction ElementFrameConfigComponent:new()    return setmetatable({}, {__index = ElementFrameConfigComponent})end---@type Entitas.Baglocal _ElementFrameConfigCP = Bag:new()for i=1,16 do  _ElementFrameConfigCP:add(ElementFrameConfigComponent:new())endfunction Entity:clearElementFrameConfigCP()    _ElementFrameConfigCP:clear()end---@return booleanfunction Entity:hasElementFrameConfig()  return self:hasComponent(CoreComponentIds.ElementFrameConfig)end---@param value   Config.ElementFrame---@returns Entitas.Entityfunction Entity:addElementFrameConfig (value )    local component = getComponent(_ElementFrameConfigCP, ElementFrameConfigComponent)    component.value  = value ;    self.elementFrameConfig = component    self:addComponent(CoreComponentIds.ElementFrameConfig, component, 'ElementFrameConfig')    return selfendfunction Entity:replaceElementFrameConfig (value )    local previousComponent    if self:hasElementFrameConfig() then        previousComponent = self.elementFrameConfig    end    local component = getComponent(_ElementFrameConfigCP, ElementFrameConfigComponent)    component.value  = value     self.elementFrameConfig = component    self:replaceComponent(CoreComponentIds.ElementFrameConfig, component, 'ElementFrameConfig')    if (previousComponent ~= nil) then        _ElementFrameConfigCP:add(previousComponent)    end    return selfendfunction Entity:removeElementFrameConfig (value )    local component = self.ElementFrameConfig    self:removeComponent(CoreComponentIds.ElementFrameConfig)    Entitas._ElementFrameConfigCP:add(component)    return selfend    ---@class ElementFrameBoardCacheComponent : IComponent---@field value Array<Array<Array<Entity>>>local ElementFrameBoardCacheComponent = {}---@privatefunction ElementFrameBoardCacheComponent:new()    return setmetatable({}, {__index = ElementFrameBoardCacheComponent})end---@type Entitas.Baglocal _ElementFrameBoardCacheCP = Bag:new()for i=1,16 do  _ElementFrameBoardCacheCP:add(ElementFrameBoardCacheComponent:new())endfunction Entity:clearElementFrameBoardCacheCP()    _ElementFrameBoardCacheCP:clear()end---@return booleanfunction Entity:hasElementFrameBoardCache()  return self:hasComponent(CoreComponentIds.ElementFrameBoardCache)end---@param value Array<Array<Array<Entity>>>---@returns Entitas.Entityfunction Entity:addElementFrameBoardCache (value)    local component = getComponent(_ElementFrameBoardCacheCP, ElementFrameBoardCacheComponent)    component.value = value;    self.elementFrameBoardCache = component    self:addComponent(CoreComponentIds.ElementFrameBoardCache, component, 'ElementFrameBoardCache')    return selfendfunction Entity:replaceElementFrameBoardCache (value)    local previousComponent    if self:hasElementFrameBoardCache() then        previousComponent = self.elementFrameBoardCache    end    local component = getComponent(_ElementFrameBoardCacheCP, ElementFrameBoardCacheComponent)    component.value = value    self.elementFrameBoardCache = component    self:replaceComponent(CoreComponentIds.ElementFrameBoardCache, component, 'ElementFrameBoardCache')    if (previousComponent ~= nil) then        _ElementFrameBoardCacheCP:add(previousComponent)    end    return selfendfunction Entity:removeElementFrameBoardCache (value)    local component = self.ElementFrameBoardCache    self:removeComponent(CoreComponentIds.ElementFrameBoardCache)    Entitas._ElementFrameBoardCacheCP:add(component)    return selfend----------------------------Entity      end-------------------------------------------------------------------------Matcher     start------------------------------------------------@class Matcher : _Matcher---@field Movable _Matcher---@field Position _Matcher---@field FramePosition _Matcher---@field GridType _Matcher---@field Destroy _Matcher---@field UnNormalDestroy _Matcher---@field ResetGameBoard _Matcher---@field GameBoardCache _Matcher---@field ViewGrid _Matcher---@field ViewPos _Matcher---@field Angle _Matcher---@field SortOrder _Matcher---@field Scale _Matcher---@field GameBoard _Matcher---@field GameBoardElement _Matcher---@field ElementConfig _Matcher---@field MoveTween _Matcher---@field Input _Matcher---@field Link _Matcher---@field CheckCanEliminate _Matcher---@field Linked _Matcher---@field Health _Matcher---@field Interactive _Matcher---@field Resource _Matcher---@field View _Matcher---@field Score _Matcher---@field Item _Matcher---@field ItemUse _Matcher---@field ItemUsePos _Matcher---@field TimeRecord _Matcher---@field ElementDiedRecord _Matcher---@field MonsterDiedRecord _Matcher---@field MapRecord _Matcher---@field Monster _Matcher---@field IdComponent _Matcher---@field Moving _Matcher---@field ElementFrame _Matcher---@field ElementFrameConfig _Matcher---@field ElementFrameBoardCache _Matcherlocal Matcher = Entitas.MatcherMatcher.Init(CoreComponentIds)----------------------------Matcher      end-------------------------------------------------------------------------Pool   start------------------------------------------------@class Pool : _Pool---@field GameBoardCacheEntity Entity---@field gameBoardCache GameBoardCacheComponent---@field GameBoardEntity Entity---@field gameBoard GameBoardComponent---@field ViewGridEntity Entity---@field viewGrid ViewGridComponent---@field isResetGameBoardEntity bool---@field ScoreEntity Entity---@field score ScoreComponent---@field LinkEntity Entity---@field link LinkComponent---@field ItemEntity Entity---@field item ItemComponent---@field TimeRecordEntity Entity---@field timeRecord TimeRecordComponent---@field ElementDiedRecordEntity Entity---@field elementDiedRecord ElementDiedRecordComponent---@field MonsterDiedRecordEntity Entity---@field monsterDiedRecord MonsterDiedRecordComponent---@field ElementFrameBoardCacheEntity Entity---@field elementFrameBoardCache ElementFrameBoardCacheComponentlocal Pool = Entitas.Pool---@param {Array<Array<Entity>>} grid"---@param { {[key} gridTypeArray"---@param { any} gridTypeLength"---@returns Entityfunction Pool:setGameBoardCache(grid, gridTypeArray, gridTypeLength)    if (self:hasGameBoardCache()) then        error(Matcher.GameBoardCache)    end    local entity = self:createEntity('GameBoardCache')    self.gameBoardCacheEntity = entity    local component = getComponent(_GameBoardCacheCP, GameBoardCacheComponent)    component.grid = grid;    component.gridTypeArray = gridTypeArray;    component.gridTypeLength = gridTypeLength;    self.gameBoardCache = component    entity.gameBoardCache = component    entity:addComponent(CoreComponentIds.GameBoardCache, component, 'GameBoardCache')    return entityend---@param {Array<Array<Entity>>} grid"---@param { {[key} gridTypeArray"---@param { any} gridTypeLength"---@returns Entityfunction Pool:replaceGameBoardCache(grid, gridTypeArray, gridTypeLength)    local entity = self.gameBoardCacheEntity    if (entity == nil) then        entity = self:setGameBoardCache(grid, gridTypeArray, gridTypeLength)    else        local previousComponent = entity.gameBoardCache        local component = getComponent(_GameBoardCacheCP, GameBoardCacheComponent)        component.grid = grid        component.gridTypeArray = gridTypeArray        component.gridTypeLength = gridTypeLength        entity.gameBoardCache = component        self.gameBoardCache = component        entity:replaceComponent(CoreComponentIds.GameBoardCache, component, 'GameBoardCache')        _GameBoardCacheCP:add(previousComponent)    end    return entityend---@return boolfunction Pool:hasGameBoardCache()    return self:getGroup(Matcher.GameBoardCache):getSingleEntity() ~= nilendfunction Pool:removeGameBoardCache()    local old = self.gameBoardCacheEntity    self.gameBoardCacheEntity = nil    self.gameBoardCache = nil    self:destroyEntity(old)end---@param {string} levelName"---@param { number} rows "---@param { number} columns "---@param {Config.LevelMapConfig} levelConfig"---@returns Entityfunction Pool:setGameBoard(levelName, rows , columns , levelConfig)    if (self:hasGameBoard()) then        error(Matcher.GameBoard)    end    local entity = self:createEntity('GameBoard')    self.gameBoardEntity = entity    local component = getComponent(_GameBoardCP, GameBoardComponent)    component.levelName = levelName;    component.rows  = rows ;    component.columns  = columns ;    component.levelConfig = levelConfig;    self.gameBoard = component    entity.gameBoard = component    entity:addComponent(CoreComponentIds.GameBoard, component, 'GameBoard')    return entityend---@param {string} levelName"---@param { number} rows "---@param { number} columns "---@param {Config.LevelMapConfig} levelConfig"---@returns Entityfunction Pool:replaceGameBoard(levelName, rows , columns , levelConfig)    local entity = self.gameBoardEntity    if (entity == nil) then        entity = self:setGameBoard(levelName, rows , columns , levelConfig)    else        local previousComponent = entity.gameBoard        local component = getComponent(_GameBoardCP, GameBoardComponent)        component.levelName = levelName        component.rows  = rows         component.columns  = columns         component.levelConfig = levelConfig        entity.gameBoard = component        self.gameBoard = component        entity:replaceComponent(CoreComponentIds.GameBoard, component, 'GameBoard')        _GameBoardCP:add(previousComponent)    end    return entityend---@return boolfunction Pool:hasGameBoard()    return self:getGroup(Matcher.GameBoard):getSingleEntity() ~= nilendfunction Pool:removeGameBoard()    local old = self.gameBoardEntity    self.gameBoardEntity = nil    self.gameBoard = nil    self:destroyEntity(old)end---@param { {[key} value"---@returns Entityfunction Pool:setViewGrid(value)    if (self:hasViewGrid()) then        error(Matcher.ViewGrid)    end    local entity = self:createEntity('ViewGrid')    self.viewGridEntity = entity    local component = getComponent(_ViewGridCP, ViewGridComponent)    component.value = value;    self.viewGrid = component    entity.viewGrid = component    entity:addComponent(CoreComponentIds.ViewGrid, component, 'ViewGrid')    return entityend---@param { {[key} value"---@returns Entityfunction Pool:replaceViewGrid(value)    local entity = self.viewGridEntity    if (entity == nil) then        entity = self:setViewGrid(value)    else        local previousComponent = entity.viewGrid        local component = getComponent(_ViewGridCP, ViewGridComponent)        component.value = value        entity.viewGrid = component        self.viewGrid = component        entity:replaceComponent(CoreComponentIds.ViewGrid, component, 'ViewGrid')        _ViewGridCP:add(previousComponent)    end    return entityend---@return boolfunction Pool:hasViewGrid()    return self:getGroup(Matcher.ViewGrid):getSingleEntity() ~= nilendfunction Pool:removeViewGrid()    local old = self.viewGridEntity    self.viewGridEntity = nil    self.viewGrid = nil    self:destroyEntity(old)end---@return boolfunction Pool:hasResetGameBoard()    return self:getGroup(Matcher.ResetGameBoard):getSingleEntity() ~= nilend---@return Poolfunction Pool:setResetGameBoard(value)    if (v ~= self:hasResetGameBoard()) then        if (v) then            self:addComponent(CoreComponentIds.ResetGameBoard, ResetGameBoardComponent, 'ResetGameBoard')        else            self:removeComponent(CoreComponentIds.ResetGameBoard)        end    end    return selfend---@param {number} value"---@returns Entityfunction Pool:setScore(value)    if (self:hasScore()) then        error(Matcher.Score)    end    local entity = self:createEntity('Score')    self.scoreEntity = entity    local component = getComponent(_ScoreCP, ScoreComponent)    component.value = value;    self.score = component    entity.score = component    entity:addComponent(CoreComponentIds.Score, component, 'Score')    return entityend---@param {number} value"---@returns Entityfunction Pool:replaceScore(value)    local entity = self.scoreEntity    if (entity == nil) then        entity = self:setScore(value)    else        local previousComponent = entity.score        local component = getComponent(_ScoreCP, ScoreComponent)        component.value = value        entity.score = component        self.score = component        entity:replaceComponent(CoreComponentIds.Score, component, 'Score')        _ScoreCP:add(previousComponent)    end    return entityend---@return boolfunction Pool:hasScore()    return self:getGroup(Matcher.Score):getSingleEntity() ~= nilendfunction Pool:removeScore()    local old = self.scoreEntity    self.scoreEntity = nil    self.score = nil    self:destroyEntity(old)end---@param {Array<Entity>} linkArray"---@param {WeGame.GridType} gridType"---@returns Entityfunction Pool:setLink(linkArray, gridType)    if (self:hasLink()) then        error(Matcher.Link)    end    local entity = self:createEntity('Link')    self.linkEntity = entity    local component = getComponent(_LinkCP, LinkComponent)    component.linkArray = linkArray;    component.gridType = gridType;    self.link = component    entity.link = component    entity:addComponent(CoreComponentIds.Link, component, 'Link')    return entityend---@param {Array<Entity>} linkArray"---@param {WeGame.GridType} gridType"---@returns Entityfunction Pool:replaceLink(linkArray, gridType)    local entity = self.linkEntity    if (entity == nil) then        entity = self:setLink(linkArray, gridType)    else        local previousComponent = entity.link        local component = getComponent(_LinkCP, LinkComponent)        component.linkArray = linkArray        component.gridType = gridType        entity.link = component        self.link = component        entity:replaceComponent(CoreComponentIds.Link, component, 'Link')        _LinkCP:add(previousComponent)    end    return entityend---@return boolfunction Pool:hasLink()    return self:getGroup(Matcher.Link):getSingleEntity() ~= nilendfunction Pool:removeLink()    local old = self.linkEntity    self.linkEntity = nil    self.link = nil    self:destroyEntity(old)end---@param {number} itemId"---@param {number} itemNum"---@returns Entityfunction Pool:setItem(itemId, itemNum)    if (self:hasItem()) then        error(Matcher.Item)    end    local entity = self:createEntity('Item')    self.itemEntity = entity    local component = getComponent(_ItemCP, ItemComponent)    component.itemId = itemId;    component.itemNum = itemNum;    self.item = component    entity.item = component    entity:addComponent(CoreComponentIds.Item, component, 'Item')    return entityend---@param {number} itemId"---@param {number} itemNum"---@returns Entityfunction Pool:replaceItem(itemId, itemNum)    local entity = self.itemEntity    if (entity == nil) then        entity = self:setItem(itemId, itemNum)    else        local previousComponent = entity.item        local component = getComponent(_ItemCP, ItemComponent)        component.itemId = itemId        component.itemNum = itemNum        entity.item = component        self.item = component        entity:replaceComponent(CoreComponentIds.Item, component, 'Item')        _ItemCP:add(previousComponent)    end    return entityend---@return boolfunction Pool:hasItem()    return self:getGroup(Matcher.Item):getSingleEntity() ~= nilendfunction Pool:removeItem()    local old = self.itemEntity    self.itemEntity = nil    self.item = nil    self:destroyEntity(old)end---@param { number} Value "---@returns Entityfunction Pool:setTimeRecord(Value )    if (self:hasTimeRecord()) then        error(Matcher.TimeRecord)    end    local entity = self:createEntity('TimeRecord')    self.timeRecordEntity = entity    local component = getComponent(_TimeRecordCP, TimeRecordComponent)    component.Value  = Value ;    self.timeRecord = component    entity.timeRecord = component    entity:addComponent(CoreComponentIds.TimeRecord, component, 'TimeRecord')    return entityend---@param { number} Value "---@returns Entityfunction Pool:replaceTimeRecord(Value )    local entity = self.timeRecordEntity    if (entity == nil) then        entity = self:setTimeRecord(Value )    else        local previousComponent = entity.timeRecord        local component = getComponent(_TimeRecordCP, TimeRecordComponent)        component.Value  = Value         entity.timeRecord = component        self.timeRecord = component        entity:replaceComponent(CoreComponentIds.TimeRecord, component, 'TimeRecord')        _TimeRecordCP:add(previousComponent)    end    return entityend---@return boolfunction Pool:hasTimeRecord()    return self:getGroup(Matcher.TimeRecord):getSingleEntity() ~= nilendfunction Pool:removeTimeRecord()    local old = self.timeRecordEntity    self.timeRecordEntity = nil    self.timeRecord = nil    self:destroyEntity(old)end---@returns Entityfunction Pool:setElementDiedRecord()    if (self:hasElementDiedRecord()) then        error(Matcher.ElementDiedRecord)    end    local entity = self:createEntity('ElementDiedRecord')    self.elementDiedRecordEntity = entity    local component = getComponent(_ElementDiedRecordCP, ElementDiedRecordComponent)    self.elementDiedRecord = component    entity.elementDiedRecord = component    entity:addComponent(CoreComponentIds.ElementDiedRecord, component, 'ElementDiedRecord')    return entityend---@returns Entityfunction Pool:replaceElementDiedRecord()    local entity = self.elementDiedRecordEntity    if (entity == nil) then        entity = self:setElementDiedRecord()    else        local previousComponent = entity.elementDiedRecord        local component = getComponent(_ElementDiedRecordCP, ElementDiedRecordComponent)        entity.elementDiedRecord = component        self.elementDiedRecord = component        entity:replaceComponent(CoreComponentIds.ElementDiedRecord, component, 'ElementDiedRecord')        _ElementDiedRecordCP:add(previousComponent)    end    return entityend---@return boolfunction Pool:hasElementDiedRecord()    return self:getGroup(Matcher.ElementDiedRecord):getSingleEntity() ~= nilendfunction Pool:removeElementDiedRecord()    local old = self.elementDiedRecordEntity    self.elementDiedRecordEntity = nil    self.elementDiedRecord = nil    self:destroyEntity(old)end---@returns Entityfunction Pool:setMonsterDiedRecord()    if (self:hasMonsterDiedRecord()) then        error(Matcher.MonsterDiedRecord)    end    local entity = self:createEntity('MonsterDiedRecord')    self.monsterDiedRecordEntity = entity    local component = getComponent(_MonsterDiedRecordCP, MonsterDiedRecordComponent)    self.monsterDiedRecord = component    entity.monsterDiedRecord = component    entity:addComponent(CoreComponentIds.MonsterDiedRecord, component, 'MonsterDiedRecord')    return entityend---@returns Entityfunction Pool:replaceMonsterDiedRecord()    local entity = self.monsterDiedRecordEntity    if (entity == nil) then        entity = self:setMonsterDiedRecord()    else        local previousComponent = entity.monsterDiedRecord        local component = getComponent(_MonsterDiedRecordCP, MonsterDiedRecordComponent)        entity.monsterDiedRecord = component        self.monsterDiedRecord = component        entity:replaceComponent(CoreComponentIds.MonsterDiedRecord, component, 'MonsterDiedRecord')        _MonsterDiedRecordCP:add(previousComponent)    end    return entityend---@return boolfunction Pool:hasMonsterDiedRecord()    return self:getGroup(Matcher.MonsterDiedRecord):getSingleEntity() ~= nilendfunction Pool:removeMonsterDiedRecord()    local old = self.monsterDiedRecordEntity    self.monsterDiedRecordEntity = nil    self.monsterDiedRecord = nil    self:destroyEntity(old)end---@param {Array<Array<Array<Entity>>>} value"---@returns Entityfunction Pool:setElementFrameBoardCache(value)    if (self:hasElementFrameBoardCache()) then        error(Matcher.ElementFrameBoardCache)    end    local entity = self:createEntity('ElementFrameBoardCache')    self.elementFrameBoardCacheEntity = entity    local component = getComponent(_ElementFrameBoardCacheCP, ElementFrameBoardCacheComponent)    component.value = value;    self.elementFrameBoardCache = component    entity.elementFrameBoardCache = component    entity:addComponent(CoreComponentIds.ElementFrameBoardCache, component, 'ElementFrameBoardCache')    return entityend---@param {Array<Array<Array<Entity>>>} value"---@returns Entityfunction Pool:replaceElementFrameBoardCache(value)    local entity = self.elementFrameBoardCacheEntity    if (entity == nil) then        entity = self:setElementFrameBoardCache(value)    else        local previousComponent = entity.elementFrameBoardCache        local component = getComponent(_ElementFrameBoardCacheCP, ElementFrameBoardCacheComponent)        component.value = value        entity.elementFrameBoardCache = component        self.elementFrameBoardCache = component        entity:replaceComponent(CoreComponentIds.ElementFrameBoardCache, component, 'ElementFrameBoardCache')        _ElementFrameBoardCacheCP:add(previousComponent)    end    return entityend---@return boolfunction Pool:hasElementFrameBoardCache()    return self:getGroup(Matcher.ElementFrameBoardCache):getSingleEntity() ~= nilendfunction Pool:removeElementFrameBoardCache()    local old = self.elementFrameBoardCacheEntity    self.elementFrameBoardCacheEntity = nil    self.elementFrameBoardCache = nil    self:destroyEntity(old)end---@return Poolfunction PoolIns()    if _Pool == nil then        _Pool = Pool:new(CoreComponentIds, CoreComponentIds.TotalComponents, nil)    end    return _Poolendfunction ReleasePool()    if _Pool ~= nil then        _Pool = Pool:new(CoreComponentIds, CoreComponentIds.TotalComponents, nil)    end    return _Poolend----------------------------Pool    end---------------------------------------------