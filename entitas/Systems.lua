---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 29801.
--- DateTime: 2018/12/4 10:24
---
local table_insert = table.insert
local utils = require("entitas.util")



---@class Ecs.Systems
local Systems = utils.class("Systems")

function Systems:ctor()
    self._initializeSystems = {}
    self._executeSystems = {}
    self._cleanupSystems = {}
    self._teardownSystems = {}
end

---@return Ecs.Systems
function Systems:add(system)
    if system.initialize then
        table_insert(self._initializeSystems, system)
    end

    if system.execute then
        table_insert(self._executeSystems, system)
    end

    if system.cleanup then
        table_insert(self._cleanupSystems, system)
    end

    if system.teardown then
        table_insert(self._teardownSystems, system)
    end
    return self
end

---@public
function Systems:initialize()
    local len = #self._initializeSystems
    for i = 1, len do
        self._initializeSystems[i]:initialize()
    end
end


function Systems:execute()
    local executeSystems = self._executeSystems
    local len = #executeSystems
    for i = 1, len do
        executeSystems[i]:execute()
    end
end


function Systems:cleanup()
    local cleanupSystems = self._cleanupSystems
    for i = 1, #cleanupSystems do
        cleanupSystems[i]:cleanup()
    end
end

function Systems:tearDown()
    for i, v in ipairs(self._teardownSystems) do
        v:tearDown()
    end
end

function Systems:activateReactiveSystems()
    for _, system in pairs(self._executeSystems) do
        if isinstance(system, ReactiveSystem) then
            system:activate()
        end

        if isinstance(system, Systems) then
            system:activate_reactive_systems()
        end
    end
end

function Systems:deactivateReactiveSystems()
    for _, system in pairs(self._executeSystems) do
        if isinstance(system, ReactiveSystem) then
            system:deactivate()
        end

        if isinstance(system, Systems) then
            system:deactivate_reactive_systems()
        end
    end
end

---@private
function Systems:clearReactiveSystems()
    for _, system in pairs(self._executeSystems) do
        if isinstance(system, ReactiveSystem) then
            system:clear()
        end

        if isinstance(system, Systems) then
            system:clearReactiveSystems()
        end
    end
end


return Systems